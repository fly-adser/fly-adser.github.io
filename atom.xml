<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fly Adser</title>
  
  <subtitle>一个广告策略算法工程师的学习笔记</subtitle>
  <link href="http://fly-adser.top/atom.xml" rel="self"/>
  
  <link href="http://fly-adser.top/"/>
  <updated>2022-02-13T12:46:59.829Z</updated>
  <id>http://fly-adser.top/</id>
  
  <author>
    <name>Fly Adser</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>32.最长有效括号</title>
    <link href="http://fly-adser.top/2022/02/13/leetcode32/"/>
    <id>http://fly-adser.top/2022/02/13/leetcode32/</id>
    <published>2022-02-13T12:45:02.000Z</published>
    <updated>2022-02-13T12:46:59.829Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>给你一个只包含 '(' 和 ')' 的字符串，找出最长有效（格式正确且连续）括号子串的长度。<a href="https://leetcode-cn.com/problems/longest-valid-parentheses/">题目链接</a><br /><span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestValidParentheses</span>(<span class="params">self, s</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        stack = [-<span class="number">1</span>]</span><br><span class="line">        left, res = <span class="number">0</span>, <span class="number">0</span>  </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(s)):</span><br><span class="line">            <span class="keyword">if</span> s[i]==<span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">                stack.append(i)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                index = stack[-<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> index&lt;<span class="number">0</span>: </span><br><span class="line">                    stack.append(i)</span><br><span class="line">                    <span class="keyword">continue</span> </span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> s[index]==<span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">                    stack.pop()</span><br><span class="line">                    res = <span class="built_in">max</span>(i-stack[-<span class="number">1</span>], res)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    stack.append(i)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;给你一个只包含 &#39;(&#39; 和 &#39;)&#39; 的字符串，找出最长有效（格式正确且连续）括号子串的长度。&lt;a href=&quot;https://leetcode-cn.com/problems/longest-valid-parentheses/&quot;&gt;题目链接&lt;/a&gt;&lt;br /&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="字符串" scheme="http://fly-adser.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="Hot100" scheme="http://fly-adser.top/tags/Hot100/"/>
    
  </entry>
  
  <entry>
    <title>31.下一个排列</title>
    <link href="http://fly-adser.top/2022/02/13/leetcode31/"/>
    <id>http://fly-adser.top/2022/02/13/leetcode31/</id>
    <published>2022-02-13T12:42:13.000Z</published>
    <updated>2022-02-13T12:44:40.298Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>整数数组的一个 排列 就是将其所有成员以序列或线性顺序排列。<a href="https://leetcode-cn.com/problems/next-permutation/">题目链接</a> <span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nextPermutation</span>(<span class="params">self, nums</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: None Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums)&lt;=<span class="number">1</span>: <span class="keyword">return</span> nums </span><br><span class="line"></span><br><span class="line">        left, right = <span class="number">0</span>, <span class="built_in">len</span>(nums)-<span class="number">1</span> </span><br><span class="line">        <span class="keyword">while</span> right&gt;left:</span><br><span class="line">            <span class="keyword">if</span> nums[right]&gt;nums[right-<span class="number">1</span>]: <span class="keyword">break</span> </span><br><span class="line">            right -= <span class="number">1</span> </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> right==left:</span><br><span class="line">            nums.sort()</span><br><span class="line">            <span class="keyword">return</span> nums </span><br><span class="line">        </span><br><span class="line">        left  = right - <span class="number">1</span> </span><br><span class="line">        right = <span class="built_in">len</span>(nums)-<span class="number">1</span> </span><br><span class="line">        <span class="keyword">while</span> right&gt;left:</span><br><span class="line">            <span class="keyword">if</span> nums[right]&gt;nums[left]: <span class="keyword">break</span> </span><br><span class="line">            right -= <span class="number">1</span> </span><br><span class="line">        </span><br><span class="line">        nums[left], nums[right] = nums[right], nums[left]</span><br><span class="line">        self.reverse(nums, left+<span class="number">1</span>, <span class="built_in">len</span>(nums)-<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span>(<span class="params">self, nums, left, right</span>):</span></span><br><span class="line">        <span class="keyword">while</span> left&lt;right:</span><br><span class="line">            nums[left], nums[right] = nums[right], nums[left]</span><br><span class="line">            left  += <span class="number">1</span></span><br><span class="line">            right -= <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;整数数组的一个 排列 就是将其所有成员以序列或线性顺序排列。&lt;a href=&quot;https://leetcode-cn.com/problems/next-permutation/&quot;&gt;题目链接&lt;/a&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="双指针" scheme="http://fly-adser.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
    <category term="Hot100" scheme="http://fly-adser.top/tags/Hot100/"/>
    
  </entry>
  
  <entry>
    <title>23.合并K个升序链表</title>
    <link href="http://fly-adser.top/2022/02/12/leetcode23/"/>
    <id>http://fly-adser.top/2022/02/12/leetcode23/</id>
    <published>2022-02-12T03:11:13.000Z</published>
    <updated>2022-02-12T03:15:37.710Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>给你一个链表数组，每个链表都已经按升序排列。<a href="https://leetcode-cn.com/problems/merge-k-sorted-lists/">题目链接</a></p><span id="more"></span><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeKLists</span>(<span class="params">self, lists</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type lists: List[ListNode]</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(lists)&lt;=<span class="number">0</span>: <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.mergeSort(lists, <span class="number">0</span>, <span class="built_in">len</span>(lists)-<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeSort</span>(<span class="params">self, lists, left, right</span>):</span></span><br><span class="line">        <span class="keyword">if</span> left&gt;=right: <span class="keyword">return</span> lists[left] </span><br><span class="line"></span><br><span class="line">        mid   = left + (right - left) // <span class="number">2</span> </span><br><span class="line">        listA = self.mergeSort(lists, left, mid)</span><br><span class="line">        listB = self.mergeSort(lists, mid+<span class="number">1</span>, right)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.mergeTwoList(listA, listB)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoList</span>(<span class="params">self, list1, list2</span>):</span></span><br><span class="line">        <span class="keyword">if</span> list1 <span class="keyword">is</span> <span class="literal">None</span>: <span class="keyword">return</span> list2 </span><br><span class="line">        <span class="keyword">if</span> list2 <span class="keyword">is</span> <span class="literal">None</span>: <span class="keyword">return</span> list1</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> list1.val&lt;=list2.val:</span><br><span class="line">            head  = list1 </span><br><span class="line">            list1 = list1.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            head  = list2</span><br><span class="line">            list2 = list2.<span class="built_in">next</span> </span><br><span class="line">        node = head</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> list1 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> list2 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> list1.val&lt;=list2.val:</span><br><span class="line">                node.<span class="built_in">next</span> = list1 </span><br><span class="line">                node      = node.<span class="built_in">next</span> </span><br><span class="line">                list1     = list1.<span class="built_in">next</span> </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                node.<span class="built_in">next</span> = list2 </span><br><span class="line">                node      = node.<span class="built_in">next</span> </span><br><span class="line">                list2     = list2.<span class="built_in">next</span>  </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> list1 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            node.<span class="built_in">next</span> = list1 </span><br><span class="line">        <span class="keyword">if</span> list2 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            node.<span class="built_in">next</span> = list2 </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;给你一个链表数组，每个链表都已经按升序排列。&lt;a href=&quot;https://leetcode-cn.com/problems/merge-k-sorted-lists/&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="分治算法" scheme="http://fly-adser.top/tags/%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95/"/>
    
    <category term="Hot100" scheme="http://fly-adser.top/tags/Hot100/"/>
    
  </entry>
  
  <entry>
    <title>22.括号生成</title>
    <link href="http://fly-adser.top/2022/02/12/leetcode22-1/"/>
    <id>http://fly-adser.top/2022/02/12/leetcode22-1/</id>
    <published>2022-02-12T03:07:20.000Z</published>
    <updated>2022-02-12T03:10:39.618Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。<a href="https://leetcode-cn.com/problems/generate-parentheses/">题目链接</a><br /><span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generateParenthesis</span>(<span class="params">self, n</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: List[str]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span> </span><br><span class="line">        self.res = []</span><br><span class="line">        self.recur([], <span class="number">0</span>, n)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.res</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recur</span>(<span class="params">self, subRes, k, n</span>):</span></span><br><span class="line">        <span class="keyword">if</span> k==<span class="number">2</span>*n:</span><br><span class="line">            stack = []</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> subRes:</span><br><span class="line">                <span class="keyword">if</span> c==<span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">                    stack.append(c)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">len</span>(stack)&lt;=<span class="number">0</span> <span class="keyword">or</span> stack[-<span class="number">1</span>]!=<span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">                        <span class="keyword">return</span> </span><br><span class="line">                    stack.pop() </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(stack)&lt;=<span class="number">0</span>:</span><br><span class="line">                self.res.append(<span class="string">&#x27;&#x27;</span>.join(subRes))</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span>   </span><br><span class="line">        </span><br><span class="line">        s = <span class="string">&#x27;()&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">            subRes.append(c)</span><br><span class="line">            self.recur(subRes, k+<span class="number">1</span>, n)</span><br><span class="line">            subRes.pop()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。&lt;a href=&quot;https://leetcode-cn.com/problems/generate-parentheses/&quot;&gt;题目链接&lt;/a&gt;&lt;br /&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="搜索与回溯算法" scheme="http://fly-adser.top/tags/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
    
    <category term="Hot100" scheme="http://fly-adser.top/tags/Hot100/"/>
    
  </entry>
  
  <entry>
    <title>21.合并两个有序链表</title>
    <link href="http://fly-adser.top/2022/02/11/leetcode21-2/"/>
    <id>http://fly-adser.top/2022/02/11/leetcode21-2/</id>
    <published>2022-02-10T23:47:55.000Z</published>
    <updated>2022-02-10T23:50:01.046Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 <a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/">题目链接</a> <span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span>(<span class="params">self, list1, list2</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type list1: Optional[ListNode]</span></span><br><span class="line"><span class="string">        :type list2: Optional[ListNode]</span></span><br><span class="line"><span class="string">        :rtype: Optional[ListNode]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> list1 <span class="keyword">is</span> <span class="literal">None</span>: <span class="keyword">return</span> list2 </span><br><span class="line">        <span class="keyword">if</span> list2 <span class="keyword">is</span> <span class="literal">None</span>: <span class="keyword">return</span> list1</span><br><span class="line">        <span class="keyword">if</span> list1.val&lt;=list2.val:</span><br><span class="line">            head  = list1</span><br><span class="line">            list1 = list1.<span class="built_in">next</span>  </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            head  = list2</span><br><span class="line">            list2 = list2.<span class="built_in">next</span> </span><br><span class="line">        </span><br><span class="line">        node = head </span><br><span class="line">        <span class="keyword">while</span> list1 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> list2 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> list1.val&lt;=list2.val:</span><br><span class="line">                node.<span class="built_in">next</span> = list1</span><br><span class="line">                list1     = list1.<span class="built_in">next</span></span><br><span class="line">                node      = node.<span class="built_in">next</span> </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                node.<span class="built_in">next</span> = list2</span><br><span class="line">                list2     = list2.<span class="built_in">next</span></span><br><span class="line">                node      = node.<span class="built_in">next</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> list1 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            node.<span class="built_in">next</span> = list1 </span><br><span class="line">        <span class="keyword">if</span> list2 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            node.<span class="built_in">next</span> = list2 </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 &lt;a href=&quot;https://leetcode-cn.com/problems/merge-two-sorted-lists/&quot;&gt;题目链接&lt;/a&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="链表" scheme="http://fly-adser.top/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="Hot100" scheme="http://fly-adser.top/tags/Hot100/"/>
    
  </entry>
  
  <entry>
    <title>20.有效的括号</title>
    <link href="http://fly-adser.top/2022/02/11/leetcode20/"/>
    <id>http://fly-adser.top/2022/02/11/leetcode20/</id>
    <published>2022-02-10T23:42:16.000Z</published>
    <updated>2022-02-10T23:47:32.719Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串 s ，判断字符串是否有效。<a href="https://leetcode-cn.com/problems/valid-parentheses/">题目链接</a> <span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span>(<span class="params">self, s</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        stack = []</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">in</span> <span class="string">&#x27;&#123;[(&#x27;</span>:</span><br><span class="line">                stack.append(c)</span><br><span class="line">            <span class="keyword">elif</span> c==<span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(stack)&lt;=<span class="number">0</span> <span class="keyword">or</span> stack[-<span class="number">1</span>]!=<span class="string">&#x27;&#123;&#x27;</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span> </span><br><span class="line">                stack.pop()</span><br><span class="line">            <span class="keyword">elif</span> c==<span class="string">&#x27;]&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(stack)&lt;=<span class="number">0</span> <span class="keyword">or</span> stack[-<span class="number">1</span>]!=<span class="string">&#x27;[&#x27;</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span> </span><br><span class="line">                stack.pop() </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(stack)&lt;=<span class="number">0</span> <span class="keyword">or</span> stack[-<span class="number">1</span>]!=<span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span> </span><br><span class="line">                stack.pop()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(stack)&lt;=<span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;给定一个只包括 &#39;(&#39;，&#39;)&#39;，&#39;{&#39;，&#39;}&#39;，&#39;[&#39;，&#39;]&#39; 的字符串 s ，判断字符串是否有效。&lt;a href=&quot;https://leetcode-cn.com/problems/valid-parentheses/&quot;&gt;题目链接&lt;/a&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="字符串" scheme="http://fly-adser.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="Hot100" scheme="http://fly-adser.top/tags/Hot100/"/>
    
  </entry>
  
  <entry>
    <title>19.删除链表的倒数第N个节点</title>
    <link href="http://fly-adser.top/2022/02/10/leetcode19/"/>
    <id>http://fly-adser.top/2022/02/10/leetcode19/</id>
    <published>2022-02-10T14:59:54.000Z</published>
    <updated>2022-02-10T15:01:49.309Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。<a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">题目链接</a><br /><span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeNthFromEnd</span>(<span class="params">self, head, n</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        left, right = head, head </span><br><span class="line">        i = <span class="number">0</span> </span><br><span class="line">        <span class="keyword">while</span> i&lt;n <span class="keyword">and</span> right <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            right = right.<span class="built_in">next</span> </span><br><span class="line">            i    += <span class="number">1</span> </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> right <span class="keyword">is</span> <span class="literal">None</span>: <span class="keyword">return</span> head.<span class="built_in">next</span> </span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> right.<span class="built_in">next</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            left  = left.<span class="built_in">next</span></span><br><span class="line">            right = right.<span class="built_in">next</span></span><br><span class="line">        </span><br><span class="line">        left.<span class="built_in">next</span> = left.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。&lt;a href=&quot;https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/&quot;&gt;题目链接&lt;/a&gt;&lt;br /&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="双指针" scheme="http://fly-adser.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
    <category term="Hot100" scheme="http://fly-adser.top/tags/Hot100/"/>
    
  </entry>
  
  <entry>
    <title>17.电话号码的字母组合</title>
    <link href="http://fly-adser.top/2022/02/10/leetcode17/"/>
    <id>http://fly-adser.top/2022/02/10/leetcode17/</id>
    <published>2022-02-10T14:57:13.000Z</published>
    <updated>2022-02-10T14:59:36.352Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。答案可以按 任意顺序 返回。<a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/">题目链接</a> <span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">letterCombinations</span>(<span class="params">self, digits</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type digits: str</span></span><br><span class="line"><span class="string">        :rtype: List[str]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.<span class="built_in">map</span> = &#123;</span><br><span class="line">            <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;3&#x27;</span>: <span class="string">&#x27;def&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;4&#x27;</span>: <span class="string">&#x27;ghi&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;5&#x27;</span>: <span class="string">&#x27;jkl&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;6&#x27;</span>: <span class="string">&#x27;mno&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;7&#x27;</span>: <span class="string">&#x27;pqrs&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;8&#x27;</span>: <span class="string">&#x27;tuv&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;9&#x27;</span>: <span class="string">&#x27;wxyz&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        self.n   = <span class="built_in">len</span>(digits)</span><br><span class="line">        self.res = []</span><br><span class="line">        <span class="keyword">if</span> self.n&lt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> self.res </span><br><span class="line">        self.recur(digits, [], <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.res</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recur</span>(<span class="params">self, digits, cs, k</span>):</span></span><br><span class="line">        <span class="keyword">if</span> k==self.n:</span><br><span class="line">            subRes = <span class="string">&#x27;&#x27;</span>.join(cs)</span><br><span class="line">            self.res.append(subRes)</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        </span><br><span class="line">        s = self.<span class="built_in">map</span>[digits[k]]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(s)):</span><br><span class="line">            cs.append(s[i])</span><br><span class="line">            self.recur(digits, cs, k+<span class="number">1</span>)</span><br><span class="line">            cs.pop()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。答案可以按 任意顺序 返回。&lt;a href=&quot;https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/&quot;&gt;题目链接&lt;/a&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="搜索与回溯算法" scheme="http://fly-adser.top/tags/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
    
    <category term="Hot100" scheme="http://fly-adser.top/tags/Hot100/"/>
    
  </entry>
  
  <entry>
    <title>15.三数之和</title>
    <link href="http://fly-adser.top/2022/02/09/leetcode15/"/>
    <id>http://fly-adser.top/2022/02/09/leetcode15/</id>
    <published>2022-02-09T14:59:37.000Z</published>
    <updated>2022-02-09T15:01:31.499Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。<a href="https://leetcode-cn.com/problems/3sum/">题目链接</a><br><span id="more"></span></p><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">threeSum</span>(<span class="params">self, nums</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        res = []</span><br><span class="line">        i, j, s = <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">len</span>(nums) </span><br><span class="line">        nums.sort()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, s):</span><br><span class="line">            <span class="keyword">if</span> i&gt;<span class="number">0</span> <span class="keyword">and</span> nums[i]==nums[i-<span class="number">1</span>]: <span class="keyword">continue</span> </span><br><span class="line">            left, right = i+<span class="number">1</span>, s-<span class="number">1</span></span><br><span class="line">            target = -nums[i] </span><br><span class="line">            <span class="keyword">while</span> left&lt;s <span class="keyword">and</span> right&gt;<span class="number">0</span> <span class="keyword">and</span> left&lt;right:</span><br><span class="line">                <span class="keyword">if</span> nums[left]+nums[right]&lt;target:</span><br><span class="line">                    left +=<span class="number">1</span> </span><br><span class="line">                    <span class="keyword">while</span> left&lt;s <span class="keyword">and</span> left&lt;right <span class="keyword">and</span> nums[left]==nums[left-<span class="number">1</span>]:</span><br><span class="line">                        left += <span class="number">1</span> </span><br><span class="line">                <span class="keyword">elif</span> nums[left]+nums[right]&gt;target:</span><br><span class="line">                    right -= <span class="number">1</span> </span><br><span class="line">                    <span class="keyword">while</span> right&gt;=<span class="number">0</span> <span class="keyword">and</span> right&gt;left <span class="keyword">and</span> nums[right]==nums[right+<span class="number">1</span>]:</span><br><span class="line">                        right -= <span class="number">1</span> </span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    res.append([nums[i], nums[left], nums[right]])</span><br><span class="line">                    left += <span class="number">1</span> </span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">                    <span class="keyword">while</span> left&lt;s <span class="keyword">and</span> left&lt;right <span class="keyword">and</span> nums[left]==nums[left-<span class="number">1</span>]:</span><br><span class="line">                        left += <span class="number">1</span> </span><br><span class="line">                    <span class="keyword">while</span> right&gt;=<span class="number">0</span> <span class="keyword">and</span> right&gt;left <span class="keyword">and</span> nums[right]==nums[right+<span class="number">1</span>]:</span><br><span class="line">                        right -= <span class="number">1</span> </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。&lt;a href=&quot;https://leetcode-cn.com/problems/3sum/&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="双指针" scheme="http://fly-adser.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
    <category term="Hot100" scheme="http://fly-adser.top/tags/Hot100/"/>
    
  </entry>
  
  <entry>
    <title>11.盛最多水的容器</title>
    <link href="http://fly-adser.top/2022/02/09/leetcode11-1/"/>
    <id>http://fly-adser.top/2022/02/09/leetcode11-1/</id>
    <published>2022-02-09T14:56:54.000Z</published>
    <updated>2022-02-09T14:59:43.022Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给你 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0) 。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。<a href="https://leetcode-cn.com/problems/container-with-most-water/">题目链接</a><br><span id="more"></span></p><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxArea</span>(<span class="params">self, height</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type height: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        i, j, res = <span class="number">0</span>, <span class="built_in">len</span>(height)-<span class="number">1</span>, <span class="number">0</span> </span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> i&lt;j:</span><br><span class="line">            <span class="keyword">if</span> height[i]&lt;height[j]:</span><br><span class="line">                res = <span class="built_in">max</span>(res, height[i]*(j-i))</span><br><span class="line">                i += <span class="number">1</span> </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res = <span class="built_in">max</span>(res, height[j]*(j-i))</span><br><span class="line">                j -= <span class="number">1</span> </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;给你 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0) 。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。&lt;a href=&quot;https://leetcode-cn.com/problems/container-with-most-water/&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="动态规划" scheme="http://fly-adser.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="Hot100" scheme="http://fly-adser.top/tags/Hot100/"/>
    
  </entry>
  
  <entry>
    <title>05.最长回文子串</title>
    <link href="http://fly-adser.top/2022/02/08/leetcode05-1/"/>
    <id>http://fly-adser.top/2022/02/08/leetcode05-1/</id>
    <published>2022-02-08T15:50:31.000Z</published>
    <updated>2022-02-08T15:52:30.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>给你一个字符串 s，找到 s 中最长的回文子串。<a href="https://leetcode-cn.com/problems/longest-palindromic-substring/">题目链接</a><br /><span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span>(<span class="params">self, s</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(s)&lt;= <span class="number">1</span>: <span class="keyword">return</span> s </span><br><span class="line">        begin, maxLen = <span class="number">0</span>, <span class="number">0</span> </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(s)-<span class="number">1</span>):</span><br><span class="line">            len1 = self.countPalind(s, i, i)</span><br><span class="line">            len2 = self.countPalind(s, i, i+<span class="number">1</span>)</span><br><span class="line">            lenS = <span class="built_in">max</span>(len1, len2)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> lenS&gt;maxLen:</span><br><span class="line">                begin  = i - (lenS-<span class="number">1</span>) / <span class="number">2</span> </span><br><span class="line">                maxLen = lenS </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> s[begin: begin+maxLen]</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countPalind</span>(<span class="params">self, s, left, right</span>):</span></span><br><span class="line">        maxLen = <span class="number">0</span> </span><br><span class="line">        <span class="keyword">while</span> left&gt;=<span class="number">0</span> <span class="keyword">and</span> right &lt;<span class="built_in">len</span>(s) <span class="keyword">and</span> s[left]==s[right]:</span><br><span class="line">            maxLen = right - left + <span class="number">1</span> </span><br><span class="line">            left  -= <span class="number">1</span> </span><br><span class="line">            right += <span class="number">1</span> </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> maxLen</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;给你一个字符串 s，找到 s 中最长的回文子串。&lt;a href=&quot;https://leetcode-cn.com/problems/longest-palindromic-substring/&quot;&gt;题目链接&lt;/a&gt;&lt;br /&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="字符串" scheme="http://fly-adser.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="Hot100" scheme="http://fly-adser.top/tags/Hot100/"/>
    
  </entry>
  
  <entry>
    <title>04.寻找两个正序数组的中位数</title>
    <link href="http://fly-adser.top/2022/02/07/leetcode04-1/"/>
    <id>http://fly-adser.top/2022/02/07/leetcode04-1/</id>
    <published>2022-02-07T08:22:16.000Z</published>
    <updated>2022-02-07T08:24:29.675Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的 中位数 。</p><p>算法的时间复杂度应该为 O(log (m+n)) 。<a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/">题目链接</a> <span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMedianSortedArrays</span>(<span class="params">self, nums1, nums2</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums1: List[int]</span></span><br><span class="line"><span class="string">        :type nums2: List[int]</span></span><br><span class="line"><span class="string">        :rtype: float</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums1)&gt;<span class="built_in">len</span>(nums2):</span><br><span class="line">            nums1, nums2 = nums2, nums1 </span><br><span class="line">        </span><br><span class="line">        m = <span class="built_in">len</span>(nums1)</span><br><span class="line">        n = <span class="built_in">len</span>(nums2)</span><br><span class="line">        totalLeft = (m + n + <span class="number">1</span>) // <span class="number">2</span> </span><br><span class="line"></span><br><span class="line">        left, right = <span class="number">0</span>, m </span><br><span class="line">        <span class="keyword">while</span> left&lt;right:</span><br><span class="line">            i = left + (right - left + <span class="number">1</span>) // <span class="number">2</span> </span><br><span class="line">            j = totalLeft - i </span><br><span class="line">            <span class="keyword">if</span> nums1[i-<span class="number">1</span>]&gt;nums2[j]:</span><br><span class="line">                right = i - <span class="number">1</span> </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                left = i  </span><br><span class="line">        </span><br><span class="line">        i, j = left, totalLeft - left </span><br><span class="line">        num1LeftMax  = nums1[i-<span class="number">1</span>] <span class="keyword">if</span> i-<span class="number">1</span>&gt;=<span class="number">0</span> <span class="keyword">else</span> <span class="built_in">float</span>(<span class="string">&#x27;-inf&#x27;</span>)</span><br><span class="line">        num2LeftMax  = nums2[j-<span class="number">1</span>] <span class="keyword">if</span> j-<span class="number">1</span>&gt;=<span class="number">0</span> <span class="keyword">else</span> <span class="built_in">float</span>(<span class="string">&#x27;-inf&#x27;</span>)</span><br><span class="line">        num1RightMin = nums1[i] <span class="keyword">if</span> i&lt;m <span class="keyword">else</span> <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">        num2RightMin = nums2[j] <span class="keyword">if</span> j&lt;n <span class="keyword">else</span> <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>) </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m+n)%<span class="number">2</span>==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">max</span>(num1LeftMax, num2LeftMax)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> (<span class="built_in">max</span>(num1LeftMax, num2LeftMax) + <span class="built_in">min</span>(num1RightMin, num2RightMin)) / <span class="number">2.0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的 中位数 。&lt;/p&gt;
&lt;p&gt;算法的时间复杂度应该为 O(log (m+n)) 。&lt;a href=&quot;https://leetcode-cn.com/problems/median-of-two-sorted-arrays/&quot;&gt;题目链接&lt;/a&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="分治算法" scheme="http://fly-adser.top/tags/%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95/"/>
    
    <category term="Hot100" scheme="http://fly-adser.top/tags/Hot100/"/>
    
  </entry>
  
  <entry>
    <title>03.无重复字符的最长子串</title>
    <link href="http://fly-adser.top/2022/02/07/leetcode3/"/>
    <id>http://fly-adser.top/2022/02/07/leetcode3/</id>
    <published>2022-02-07T08:18:41.000Z</published>
    <updated>2022-02-07T08:21:31.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。<a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/">题目链接</a> <span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLongestSubstring</span>(<span class="params">self, s</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(s)&lt;=<span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span> </span><br><span class="line">        left, maxLen = <span class="number">0</span>, <span class="number">0</span> </span><br><span class="line">        dic = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(s):</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">in</span> dic <span class="keyword">and</span> dic[c]&gt;=left:</span><br><span class="line">                left   = dic[c]+<span class="number">1</span></span><br><span class="line">                dic[c] = i</span><br><span class="line">                <span class="keyword">continue</span> </span><br><span class="line">            </span><br><span class="line">            dic[c] = i </span><br><span class="line">            maxLen = <span class="built_in">max</span>(maxLen, i-left+<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> maxLen</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。&lt;a href=&quot;https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/&quot;&gt;题目链接&lt;/a&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="字符串" scheme="http://fly-adser.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="Hot100" scheme="http://fly-adser.top/tags/Hot100/"/>
    
  </entry>
  
  <entry>
    <title>LTR预估：从一探深浅到实战演练</title>
    <link href="http://fly-adser.top/2022/02/06/LTRPartB/"/>
    <id>http://fly-adser.top/2022/02/06/LTRPartB/</id>
    <published>2022-02-06T13:21:01.000Z</published>
    <updated>2022-02-12T03:16:19.276Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇文章，<a href="https://fly-adser.top/2021/12/30/LTRpartA/#more">LTR预估: 从慕名而来到一探深浅</a>，介绍了LTR预估建模的主要思路和一些经典算法。但是，算法理论到实际应用之间还存在一段距离，比如，样本如何构建、如何应用LTR进行排序等，本文试图从实际应用的角度出发来回答这些问题<br /><span id="more"></span> 在工业界中，排序在搜索、推荐和广告中都有较为广泛的应用。由于我在工作中接触广告业务比较多，因此，本文首先会简单总结一下排序在广告业务中的应用，再结合广告业务，从实际操作的角度出发，重新解读LTR</p><h1 id="在线广告系统架构">在线广告系统架构</h1><p><img src="https://fly-adser-1302830623.cos.ap-beijing.myqcloud.com/LTRpartB/1.png" width="50%" height="50%"></p><p>如上图所示，常规的在线广告系统架构一般分为四个主要阶段：<br />1）<strong>召回层：</strong> 负责从全量广告库中<strong>快速筛选</strong>出部分广告，供后面排序阶段使用。在设计召回层时，既要考虑召回率，又要考虑计算速度，一般使用多路召回架构并行计算来提高计算速度。常见的召回算法可参考文献[1]<br />2）<strong>粗排层：</strong> 粗排层和后面的精排及重排本质上都是排序，之所以将排序分为三个不同的阶段，一方面是<strong>基于工程上的考虑</strong>，召回层吐出的广告数量仍然比较多，如果直接在这个阶段使用比较复杂的模型进行预估，性能耗时很难满足要求；另一方面，精排过后的重排层，需要<strong>融合用户体验、平台收益以及广告主利益等因素</strong>来生成最终的广告展示列表。因此，粗排处于召回层和精排层之间，作用是<strong>使用相对轻量的模型或策略，对召回层输出的广告进行初步排序，缩小候选广告池</strong>。一般情况下，是根据广告的预估ctr对其进行排序<br />3）<strong>精排层：</strong> 精排层的候选广告数量相对较少，可以使用一些<strong>复杂模型</strong>来提升预估质量，同样地，一般也是按照预估ctr进行排序。随着深度学习的兴起，这个阶段涌现出了许多优秀的模型，如WDL、DIN等[2]<br />4）<strong>重排层：</strong> 重排层是最接近用户的一个阶段，因此，这个阶段不仅需要考虑用户体验(相关性，如ctr)，还需要考虑平台收益和广告主利益，是一个<strong>三方博弈问题</strong>。一方面，可以将其抽象为<strong>一个多约束条件下的线性规划问题</strong>，根据业务场景，设定约束条件，推导排序公式[3]；另一方面，相比于精排阶段，重排阶段可以<strong>利用位置bias信息和list信息进一步对预估质量分进行校准</strong>，这方面的工作可参考文献[4]和文献[5]</p><p>因此，排序在在线广告服务系统中是至关重要的</p><h1 id="ltr模型实现概览">LTR模型实现概览</h1><p>下面是每类LTR实现的模型、所使用的数据集及代码链接</p><table><thead><tr class="header"><th>类型</th><th>模型</th><th>数据集</th><th>代码链接</th></tr></thead><tbody><tr class="odd"><td>point-wise</td><td>LR、DNN</td><td>MQ2008</td><td><a href="https://github.com/fly-adser/tensorflow-LTR">point-wise实现</a></td></tr><tr class="even"><td>pair-wise</td><td>RankNet、LambdaRank</td><td>MQ2008</td><td><a href="https://github.com/fly-adser/tensorflow-LTR">pair-wise实现</a></td></tr><tr class="odd"><td>list-wise</td><td>ListNet</td><td>MQ2008</td><td><a href="https://github.com/fly-adser/tensorflow-LTR">list-wise实现</a></td></tr></tbody></table><h2 id="数据集-for-ltr">数据集 for LTR</h2><p><img src="https://fly-adser-1302830623.cos.ap-beijing.myqcloud.com/LTRpartB/6.png"></p><p>如上图所示，其中第一列是是label；第二列是搜索请求id，即同一个qid下的所有样本是同一次搜索请求下的样本；从第三列开始是特征</p><h1 id="ltr模型实现详细介绍">LTR模型实现详细介绍</h1><p>在具体实现时，不同类型的LTR模型的差异主要体现在损失函数上。本节在每类LTR中选取一个模型进行实操介绍，其中，point-wise选取DNN模型、pair-wise选取RankNet模型以及list-wise选取listNet模型</p><h2 id="point-wise模型">Point-Wise模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">score   = logits = self._score_fn(self.feature)</span><br><span class="line"></span><br><span class="line">logloss = tf.nn.sigmoid_cross_entropy_with_logits(logits=logits, labels=self.label)</span><br><span class="line">loss    = tf.reduce_mean(logloss)</span><br></pre></td></tr></table></figure><p>从上面的损失函数可以看出，point-wise模型在训练和预估时：</p><ul><li>损失函数的计算是以单条样本的预估和label为基础的</li><li>在预估时，对于同一个query下的多个样本，每个样本都会输出一个预估分，代表相关性，然后根据预估分进行排序</li></ul><h2 id="pair-wise模型">Pair-Wise模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># score</span></span><br><span class="line">score = self._score_fn(self.feature)</span><br><span class="line"></span><br><span class="line"><span class="comment"># logloss</span></span><br><span class="line">S_ij = self.label - tf.transpose(self.label)</span><br><span class="line">S_ij = tf.maximum(tf.minimum(<span class="number">1.</span>, S_ij), -<span class="number">1.</span>)</span><br><span class="line">P_ij = (<span class="number">1</span> / <span class="number">2</span>) * (<span class="number">1</span> + S_ij)</span><br><span class="line">s_i_minus_s_j = logits = score - tf.transpose(score)</span><br><span class="line"></span><br><span class="line">logloss = tf.nn.sigmoid_cross_entropy_with_logits(logits=s_i_minus_s_j, labels=P_ij)</span><br><span class="line"></span><br><span class="line"><span class="comment"># only extracted the loss of pairs of the same group</span></span><br><span class="line">mask1 = tf.equal(self.qid - tf.transpose(self.qid), <span class="number">0</span>)</span><br><span class="line">mask1 = tf.cast(mask1, tf.float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># exclude the pair of sample and itself</span></span><br><span class="line">n     = tf.shape(self.feature)[<span class="number">0</span>]</span><br><span class="line">mask2 = tf.ones([n, n]) - tf.diag(tf.ones([n]))</span><br><span class="line">mask  = mask1 * mask2</span><br><span class="line">num_pairs = tf.reduce_sum(mask)</span><br><span class="line"></span><br><span class="line">loss  = tf.cond(tf.equal(num_pairs, <span class="number">0</span>), <span class="keyword">lambda</span>: <span class="number">0.</span>, <span class="keyword">lambda</span>: tf.reduce_sum(logloss * mask) / num_pairs)</span><br></pre></td></tr></table></figure><p>从上面的损失函数可以看出，pair-wise模型在训练和预估时：</p><ul><li>损失函数的计算是以单个query下不同样本之间的相对顺序为基础的</li><li>在预估时，对于同一个query下的多个样本，每个样本都会输出一个预估分，代表相关性，然后根据预估分进行排序</li></ul><h2 id="list-wise模型">List-Wise模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># score</span></span><br><span class="line">score = self._score_fn(self.feature)</span><br><span class="line"></span><br><span class="line">qid_unique = np.unique(self.qid)</span><br><span class="line">n = <span class="built_in">len</span>(qid_unique)</span><br><span class="line">losses = np.zeros(n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> e, qid <span class="keyword">in</span> <span class="built_in">enumerate</span>(qid_unique):</span><br><span class="line">    ind   = np.where(self.qid == qid)[<span class="number">0</span>]</span><br><span class="line">    df    = pd.DataFrame(&#123;<span class="string">&quot;label&quot;</span>: self.label[ind].flatten(), <span class="string">&quot;score&quot;</span>: score[ind].flatten()&#125;)</span><br><span class="line">    df.sort_values(<span class="string">&quot;label&quot;</span>, ascending=<span class="literal">False</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    p_true, p_pred = <span class="number">1.0</span>, <span class="number">1.0</span></span><br><span class="line">    s     = <span class="built_in">len</span>(df)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, s):</span><br><span class="line">         p_true *= ((df[<span class="string">&quot;label&quot;</span>][i]+<span class="number">0.001</span>) / (<span class="built_in">sum</span>(df[<span class="string">&quot;label&quot;</span>][i:])+<span class="number">0.001</span>))</span><br><span class="line">         p_pred *= ((df[<span class="string">&quot;score&quot;</span>][i]+<span class="number">0.001</span>) / (<span class="built_in">sum</span>(df[<span class="string">&quot;score&quot;</span>][i:])+<span class="number">0.001</span>)) </span><br><span class="line">            </span><br><span class="line">losses[e] = tf.keras.losses.KLD(p_true, p_pred)</span><br><span class="line">        </span><br><span class="line">loss = np.mean(losses)</span><br></pre></td></tr></table></figure><p>从上面的损失函数可以看出，list-wise模型在训练和预估时：</p><ul><li>损失函数的理算是以单个query下序列整体概率分布为基础的</li><li>在预估时，对于同一个query下的多个样本，每个样本都会输出一个预估分，代表相关性，然后根据预估分进行排序</li></ul><h1 id="参考文献">参考文献</h1><p>[1].<a href="https://zhuanlan.zhihu.com/p/351716045">【总结】推荐系统——召回篇【1】</a><br />[2].<a href="https://zhuanlan.zhihu.com/p/432817787">【总结】推荐系统——精排篇【1】</a><br />[3].<a href="https://fly-adser.top/2021/12/29/sortEquation/">多约束条件下的排序算法设计</a><br />[4].<a href="https://arxiv.org/abs/1904.06813">Personalized Re-ranking for Recommendation</a><br />[5].<a href="https://arxiv.org/abs/1810.02019">Seq2Slate: Re-ranking and Slate Optimization with RNNs</a><br />[6].<a href="https://github.com/fly-adser/tensorflow-LTR">github of fly adser. tensorflow-LTR</a><br />[7].<a href="https://zhuanlan.zhihu.com/p/66514492">Learning to Rank学习笔记--ListwiseRank</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上一篇文章，&lt;a href=&quot;https://fly-adser.top/2021/12/30/LTRpartA/#more&quot;&gt;LTR预估: 从慕名而来到一探深浅&lt;/a&gt;，介绍了LTR预估建模的主要思路和一些经典算法。但是，算法理论到实际应用之间还存在一段距离，比如，样本如何构建、如何应用LTR进行排序等，本文试图从实际应用的角度出发来回答这些问题&lt;br /&gt;</summary>
    
    
    
    <category term="LTR预估" scheme="http://fly-adser.top/categories/LTR%E9%A2%84%E4%BC%B0/"/>
    
    
    <category term="机器学习" scheme="http://fly-adser.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="LTR预估" scheme="http://fly-adser.top/tags/LTR%E9%A2%84%E4%BC%B0/"/>
    
  </entry>
  
  <entry>
    <title>02.两数相加</title>
    <link href="http://fly-adser.top/2022/02/06/leetcode02/"/>
    <id>http://fly-adser.top/2022/02/06/leetcode02/</id>
    <published>2022-02-06T03:14:21.000Z</published>
    <updated>2022-02-06T03:16:13.048Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。<a href="https://leetcode-cn.com/problems/add-two-numbers/">题目链接</a> <span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span>(<span class="params">self, l1, l2</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type l1: ListNode</span></span><br><span class="line"><span class="string">        :type l2: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        ant = <span class="number">0</span></span><br><span class="line">        cnt = <span class="number">0</span></span><br><span class="line">        res = l1 </span><br><span class="line">        pre = l1</span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> l2 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            ant = (l1.val + l2.val + cnt) % <span class="number">10</span> </span><br><span class="line">            cnt = (l1.val + l2.val + cnt) // <span class="number">10</span></span><br><span class="line">            l1.val = ant </span><br><span class="line">            pre = l1 </span><br><span class="line">            l1  = l1.<span class="built_in">next</span></span><br><span class="line">            l2  = l2.<span class="built_in">next</span> </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            ant = (l1.val + cnt) % <span class="number">10</span> </span><br><span class="line">            cnt = (l1.val + cnt) // <span class="number">10</span></span><br><span class="line">            l1.val = ant</span><br><span class="line">            pre = l1 </span><br><span class="line">            l1  = l1.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> l1 <span class="keyword">is</span> <span class="literal">None</span>: l1 = pre </span><br><span class="line">        <span class="keyword">while</span> l2 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            ant = (l2.val + cnt) % <span class="number">10</span> </span><br><span class="line">            cnt = (l2.val + cnt) // <span class="number">10</span></span><br><span class="line">            node = ListNode(ant)</span><br><span class="line">            l1.<span class="built_in">next</span> = node</span><br><span class="line">            pre = l1  </span><br><span class="line">            l1  = l1.<span class="built_in">next</span></span><br><span class="line">            l2  = l2.<span class="built_in">next</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> l1 <span class="keyword">is</span> <span class="literal">None</span>: l1 = pre </span><br><span class="line">        <span class="keyword">if</span> cnt &gt; <span class="number">0</span>:</span><br><span class="line">            node = ListNode(cnt)</span><br><span class="line">            l1.<span class="built_in">next</span> = node </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。&lt;a href=&quot;https://leetcode-cn.com/problems/add-two-numbers/&quot;&gt;题目链接&lt;/a&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="链表" scheme="http://fly-adser.top/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="Hot100" scheme="http://fly-adser.top/tags/Hot100/"/>
    
  </entry>
  
  <entry>
    <title>01.两数之和</title>
    <link href="http://fly-adser.top/2022/02/06/leetcode01/"/>
    <id>http://fly-adser.top/2022/02/06/leetcode01/</id>
    <published>2022-02-06T03:10:55.000Z</published>
    <updated>2022-02-06T03:13:54.089Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target 的那 两个 整数，并返回它们的数组下标。<a href="https://leetcode-cn.com/problems/two-sum/">题目链接</a> <span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, nums, target</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        dic = &#123;&#125;</span><br><span class="line">        res = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            <span class="keyword">if</span> num <span class="keyword">in</span> dic:</span><br><span class="line">                res.append(dic[num])</span><br><span class="line">                res.append(i)</span><br><span class="line">                <span class="keyword">break</span> </span><br><span class="line">            </span><br><span class="line">            value = target - num </span><br><span class="line">            dic[value] = i</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target 的那 两个 整数，并返回它们的数组下标。&lt;a href=&quot;https://leetcode-cn.com/problems/two-sum/&quot;&gt;题目链接&lt;/a&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="数学" scheme="http://fly-adser.top/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="Hot100" scheme="http://fly-adser.top/tags/Hot100/"/>
    
  </entry>
  
  <entry>
    <title>400.数字序列中某一位的数字</title>
    <link href="http://fly-adser.top/2022/02/04/leetcode400/"/>
    <id>http://fly-adser.top/2022/02/04/leetcode400/</id>
    <published>2022-02-04T09:10:08.000Z</published>
    <updated>2022-02-04T09:12:54.033Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>数字以0123456789101112131415…的格式序列化到一个字符序列中。在这个序列中，第5位（从下标0开始计数）是5，第13位是1，第19位是4，等等。<a href="https://leetcode-cn.com/problems/shu-zi-xu-lie-zhong-mou-yi-wei-de-shu-zi-lcof/">题目链接</a> <span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findNthDigit</span>(<span class="params">self, n</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        digit, start, count = <span class="number">1</span>, <span class="number">1</span>, <span class="number">9</span> </span><br><span class="line">        <span class="keyword">while</span> n&gt;count:</span><br><span class="line">            n -= count </span><br><span class="line">            start *= <span class="number">10</span> </span><br><span class="line">            digit += <span class="number">1</span></span><br><span class="line">            count = <span class="number">9</span> * start * digit </span><br><span class="line">        </span><br><span class="line">        num = start + (n-<span class="number">1</span>) // digit </span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(<span class="built_in">str</span>(num)[(n-<span class="number">1</span>)%digit])</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;数字以0123456789101112131415…的格式序列化到一个字符序列中。在这个序列中，第5位（从下标0开始计数）是5，第13位是1，第19位是4，等等。&lt;a href=&quot;https://leetcode-cn.com/problems/shu-zi-xu-lie-zhong-mou-yi-wei-de-shu-zi-lcof/&quot;&gt;题目链接&lt;/a&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="剑指offer" scheme="http://fly-adser.top/tags/%E5%89%91%E6%8C%87offer/"/>
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="数学" scheme="http://fly-adser.top/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>233.1~n整数中1出现的次数</title>
    <link href="http://fly-adser.top/2022/02/04/leetcode233/"/>
    <id>http://fly-adser.top/2022/02/04/leetcode233/</id>
    <published>2022-02-04T09:07:28.000Z</published>
    <updated>2022-02-04T09:09:43.450Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>输入一个整数 n ，求1～n这n个整数的十进制表示中1出现的次数。<a href="https://leetcode-cn.com/problems/1nzheng-shu-zhong-1chu-xian-de-ci-shu-lcof/">题目链接</a><br /><span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countDigitOne</span>(<span class="params">self, n</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        digit, res = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">        high, cur, low = n//<span class="number">10</span>, n%<span class="number">10</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> high!=<span class="number">0</span> <span class="keyword">or</span> cur!=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> cur==<span class="number">0</span>:</span><br><span class="line">                res += high*digit </span><br><span class="line">            <span class="keyword">elif</span> cur==<span class="number">1</span>:</span><br><span class="line">                res += high*digit + low + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res += (high+<span class="number">1</span>)*digit </span><br><span class="line">            </span><br><span class="line">            low += cur*digit </span><br><span class="line">            cur  = high % <span class="number">10</span></span><br><span class="line">            high = high // <span class="number">10</span></span><br><span class="line">            digit *= <span class="number">10</span> </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;输入一个整数 n ，求1～n这n个整数的十进制表示中1出现的次数。&lt;a href=&quot;https://leetcode-cn.com/problems/1nzheng-shu-zhong-1chu-xian-de-ci-shu-lcof/&quot;&gt;题目链接&lt;/a&gt;&lt;br /&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="剑指offer" scheme="http://fly-adser.top/tags/%E5%89%91%E6%8C%87offer/"/>
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="数学" scheme="http://fly-adser.top/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>343.剪绳子II</title>
    <link href="http://fly-adser.top/2022/02/04/leetcode343-1/"/>
    <id>http://fly-adser.top/2022/02/04/leetcode343-1/</id>
    <published>2022-02-04T08:51:10.000Z</published>
    <updated>2022-02-04T09:06:57.653Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n&gt;1并且m&gt;1），每段绳子的长度记为 k[0],k[1]...k[m - 1] 。请问 k[0]<em>k[1]</em>...*k[m - 1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18</p><p>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。<a href="https://leetcode-cn.com/problems/jian-sheng-zi-ii-lcof/">题目链接</a> <span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cuttingRope</span>(<span class="params">self, n</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">2</span>: <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">3</span>: <span class="keyword">return</span> <span class="number">2</span> </span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">4</span>: <span class="keyword">return</span> <span class="number">4</span> </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> n%<span class="number">3</span>==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">pow</span>(<span class="number">3</span>, n // <span class="number">3</span>) % <span class="number">1000000007</span> </span><br><span class="line">        <span class="keyword">if</span> n%<span class="number">3</span>==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">pow</span>(<span class="number">3</span>, n // <span class="number">3</span> - <span class="number">1</span>) * <span class="number">4</span> % <span class="number">1000000007</span>  </span><br><span class="line">        <span class="keyword">if</span> n%<span class="number">3</span>==<span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">pow</span>(<span class="number">3</span>, n // <span class="number">3</span>) * <span class="number">2</span> % <span class="number">1000000007</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n&amp;gt;1并且m&amp;gt;1），每段绳子的长度记为 k[0],k[1]...k[m - 1] 。请问 k[0]&lt;em&gt;k[1]&lt;/em&gt;...*k[m - 1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18&lt;/p&gt;
&lt;p&gt;答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。&lt;a href=&quot;https://leetcode-cn.com/problems/jian-sheng-zi-ii-lcof/&quot;&gt;题目链接&lt;/a&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="剑指offer" scheme="http://fly-adser.top/tags/%E5%89%91%E6%8C%87offer/"/>
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="数学" scheme="http://fly-adser.top/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>51.数组中的逆序对</title>
    <link href="http://fly-adser.top/2022/02/04/leetcodesd51/"/>
    <id>http://fly-adser.top/2022/02/04/leetcodesd51/</id>
    <published>2022-02-04T08:48:48.000Z</published>
    <updated>2022-02-04T08:50:44.710Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组，求出这个数组中的逆序对的总数。<a href="https://leetcode-cn.com/problems/shu-zu-zhong-de-ni-xu-dui-lcof/">题目链接</a> <span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reversePairs</span>(<span class="params">self, nums</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.res = <span class="number">0</span></span><br><span class="line">        self.mergeSort(nums, <span class="number">0</span>, <span class="built_in">len</span>(nums)-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.res </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeSort</span>(<span class="params">self, nums, left, right</span>):</span></span><br><span class="line">        <span class="keyword">if</span> left&gt;=right: <span class="keyword">return</span> </span><br><span class="line">        </span><br><span class="line">        mid = left + (right - left) // <span class="number">2</span> </span><br><span class="line">        self.mergeSort(nums, left, mid)</span><br><span class="line">        self.mergeSort(nums, mid+<span class="number">1</span>, right)</span><br><span class="line">        self.merge(nums, left, mid, right) </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span>(<span class="params">self, nums, left, mid, right</span>):</span></span><br><span class="line">        <span class="keyword">if</span> left&gt;=right: <span class="keyword">return</span> </span><br><span class="line"></span><br><span class="line">        helper = [<span class="number">0</span>] * (right-left+<span class="number">1</span>)</span><br><span class="line">        i, j, k = left, mid+<span class="number">1</span>, <span class="number">0</span> </span><br><span class="line">        <span class="keyword">while</span> i&lt;=mid <span class="keyword">and</span> j&lt;=right:</span><br><span class="line">            <span class="keyword">if</span> nums[i]&gt;nums[j]:</span><br><span class="line">                self.res += (right-j+<span class="number">1</span>)</span><br><span class="line">                helper[k] = nums[i]</span><br><span class="line">                k += <span class="number">1</span></span><br><span class="line">                i += <span class="number">1</span> </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                helper[k] = nums[j]</span><br><span class="line">                k += <span class="number">1</span></span><br><span class="line">                j += <span class="number">1</span> </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> i&lt;=mid:</span><br><span class="line">            helper[k] = nums[i]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> j&lt;=right:</span><br><span class="line">            helper[k] = nums[j]</span><br><span class="line">            j += <span class="number">1</span> </span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, right-left+<span class="number">1</span>):</span><br><span class="line">            nums[left+i] = helper[i]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组，求出这个数组中的逆序对的总数。&lt;a href=&quot;https://leetcode-cn.com/problems/shu-zu-zhong-de-ni-xu-dui-lcof/&quot;&gt;题目链接&lt;/a&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="剑指offer" scheme="http://fly-adser.top/tags/%E5%89%91%E6%8C%87offer/"/>
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="动态规划" scheme="http://fly-adser.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
</feed>
