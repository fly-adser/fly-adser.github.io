<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fly Adser</title>
  
  <subtitle>一个广告策略算法工程师的学习笔记</subtitle>
  <link href="http://fly-adser.top/atom.xml" rel="self"/>
  
  <link href="http://fly-adser.top/"/>
  <updated>2022-02-06T13:28:16.635Z</updated>
  <id>http://fly-adser.top/</id>
  
  <author>
    <name>Fly Adser</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LTR预估：从一探深浅到实战演练</title>
    <link href="http://fly-adser.top/2022/02/06/LTRPartB/"/>
    <id>http://fly-adser.top/2022/02/06/LTRPartB/</id>
    <published>2022-02-06T13:21:01.000Z</published>
    <updated>2022-02-06T13:28:16.635Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇文章，<a href="https://fly-adser.top/2021/12/30/LTRpartA/#more">LTR预估: 从慕名而来到一探深浅</a>，介绍了LTR预估建模的主要思路和一些经典算法。但是，算法理论到实际应用之间还存在一段距离，比如，样本如何构建、如何应用LTR进行排序等，本文试图从实际应用的角度出发来回答这些问题</p><p>在工业界中，排序在搜索、推荐和广告中都有较为广泛的应用。由于我在工作中接触广告业务比较多，因此，本文首先会简单总结一下排序在广告业务中的应用，再结合广告业务，从实际操作的角度出发，重新解读LTR</p><h1 id="在线广告系统架构">在线广告系统架构</h1><p><img src="https://fly-adser-1302830623.cos.ap-beijing.myqcloud.com/LTRpartB/1.png" width="50%" height="50%"></p><p>如上图所示，常规的在线广告系统架构一般分为四个主要阶段：<br />1）<strong>召回层：</strong> 负责从全量广告库中<strong>快速筛选</strong>出部分广告，供后面排序阶段使用。在设计召回层时，既要考虑召回率，又要考虑计算速度，一般使用多路召回架构并行计算来提高计算速度。常见的召回算法可参考文献[1]<br />2）<strong>粗排层：</strong> 粗排层和后面的精排及重排本质上都是排序，之所以将排序分为三个不同的阶段，一方面是<strong>基于工程上的考虑</strong>，召回层吐出的广告数量仍然比较多，如果直接在这个阶段使用比较复杂的模型进行预估，性能耗时很难满足要求；另一方面，精排过后的重排层，需要<strong>融合用户体验、平台收益以及广告主利益等因素</strong>来生成最终的广告展示列表。因此，粗排处于召回层和精排层之间，作用是<strong>使用相对轻量的模型或策略，对召回层输出的广告进行初步排序，缩小候选广告池</strong>。一般情况下，是根据广告的预估ctr对其进行排序<br />3）<strong>精排层：</strong> 精排层的候选广告数量相对较少，可以使用一些<strong>复杂模型</strong>来提升预估质量，同样地，一般也是按照预估ctr进行排序。随着深度学习的兴起，这个阶段涌现出了许多优秀的模型，如WDL、DIN等[2]<br />4）<strong>重排层：</strong> 重排层是最接近用户的一个阶段，因此，这个阶段不仅需要考虑用户体验(相关性，如ctr)，还需要考虑平台收益和广告主利益，是一个<strong>三方博弈问题</strong>。一方面，可以将其抽象为<strong>一个多约束条件下的线性规划问题</strong>，根据业务场景，设定约束条件，推导排序公式[3]；另一方面，相比于精排阶段，重排阶段可以<strong>利用位置bias信息和list信息进一步对预估质量分进行校准</strong>，这方面的工作可参考文献[4]和文献[5]</p><p>因此，排序在在线广告服务系统中是至关重要的</p><h1 id="ltr模型实现概览">LTR模型实现概览</h1><p>下面是每类LTR实现的模型、所使用的数据集及代码链接</p><table><thead><tr class="header"><th>类型</th><th>模型</th><th>数据集</th><th>代码链接</th></tr></thead><tbody><tr class="odd"><td>point-wise</td><td>LR、DNN</td><td>MQ2008</td><td><a href="https://github.com/fly-adser/tensorflow-LTR">point-wise实现</a></td></tr><tr class="even"><td>pair-wise</td><td>RankNet、LambdaRank</td><td>MQ2008</td><td><a href="https://github.com/fly-adser/tensorflow-LTR">pair-wise实现</a></td></tr><tr class="odd"><td>list-wise</td><td>ListNet</td><td>MQ2008</td><td><a href="https://github.com/fly-adser/tensorflow-LTR">list-wise实现</a></td></tr></tbody></table><h2 id="数据集-for-ltr">数据集 for LTR</h2><p><img src="https://fly-adser-1302830623.cos.ap-beijing.myqcloud.com/LTRpartB/6.png"></p><p>如上图所示，其中第一列是是label；第二列是搜索请求id，即同一个qid下的所有样本是同一次搜索请求下的样本；从第三列开始是特征</p><h1 id="ltr模型实现详细介绍">LTR模型实现详细介绍</h1><p>在具体实现时，不同类型的LTR模型的差异主要体现在损失函数上。本节在每类LTR中选取一个模型进行实操介绍，其中，point-wise选取DNN模型、pair-wise选取RankNet模型以及list-wise选取listNet模型</p><h2 id="point-wise模型">Point-Wise模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">score   = logits = self._score_fn(self.feature)</span><br><span class="line"></span><br><span class="line">logloss = tf.nn.sigmoid_cross_entropy_with_logits(logits=logits, labels=self.label)</span><br><span class="line">loss    = tf.reduce_mean(logloss)</span><br></pre></td></tr></table></figure><p>从上面的损失函数可以看出，point-wise模型在训练和预估时：</p><ul><li>损失函数的计算是以单条样本的预估和label为基础的</li><li>在预估时，对于同一个query下的多个样本，每个样本都会输出一个预估分，代表相关性，然后根据预估分进行排序</li></ul><h2 id="pair-wise模型">Pair-Wise模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># score</span></span><br><span class="line">score = self._score_fn(self.feature)</span><br><span class="line"></span><br><span class="line"><span class="comment"># logloss</span></span><br><span class="line">S_ij = self.label - tf.transpose(self.label)</span><br><span class="line">S_ij = tf.maximum(tf.minimum(<span class="number">1.</span>, S_ij), -<span class="number">1.</span>)</span><br><span class="line">P_ij = (<span class="number">1</span> / <span class="number">2</span>) * (<span class="number">1</span> + S_ij)</span><br><span class="line">s_i_minus_s_j = logits = score - tf.transpose(score)</span><br><span class="line"></span><br><span class="line">logloss = tf.nn.sigmoid_cross_entropy_with_logits(logits=s_i_minus_s_j, labels=P_ij)</span><br><span class="line"></span><br><span class="line"><span class="comment"># only extracted the loss of pairs of the same group</span></span><br><span class="line">mask1 = tf.equal(self.qid - tf.transpose(self.qid), <span class="number">0</span>)</span><br><span class="line">mask1 = tf.cast(mask1, tf.float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># exclude the pair of sample and itself</span></span><br><span class="line">n     = tf.shape(self.feature)[<span class="number">0</span>]</span><br><span class="line">mask2 = tf.ones([n, n]) - tf.diag(tf.ones([n]))</span><br><span class="line">mask  = mask1 * mask2</span><br><span class="line">num_pairs = tf.reduce_sum(mask)</span><br><span class="line"></span><br><span class="line">loss  = tf.cond(tf.equal(num_pairs, <span class="number">0</span>), <span class="keyword">lambda</span>: <span class="number">0.</span>, <span class="keyword">lambda</span>: tf.reduce_sum(logloss * mask) / num_pairs)</span><br></pre></td></tr></table></figure><p>从上面的损失函数可以看出，pair-wise模型在训练和预估时：</p><ul><li>损失函数的计算是以单个query下不同样本之间的相对顺序为基础的</li><li>在预估时，对于同一个query下的多个样本，每个样本都会输出一个预估分，代表相关性，然后根据预估分进行排序</li></ul><h2 id="list-wise模型">List-Wise模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># score</span></span><br><span class="line">score = self._score_fn(self.feature)</span><br><span class="line"></span><br><span class="line">qid_unique = np.unique(self.qid)</span><br><span class="line">n = <span class="built_in">len</span>(qid_unique)</span><br><span class="line">losses = np.zeros(n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> e, qid <span class="keyword">in</span> <span class="built_in">enumerate</span>(qid_unique):</span><br><span class="line">    ind   = np.where(self.qid == qid)[<span class="number">0</span>]</span><br><span class="line">    df    = pd.DataFrame(&#123;<span class="string">&quot;label&quot;</span>: self.label[ind].flatten(), <span class="string">&quot;score&quot;</span>: score[ind].flatten()&#125;)</span><br><span class="line">    df.sort_values(<span class="string">&quot;label&quot;</span>, ascending=<span class="literal">False</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    p_true, p_pred = <span class="number">1.0</span>, <span class="number">1.0</span></span><br><span class="line">    s     = <span class="built_in">len</span>(df)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, s):</span><br><span class="line">         p_true *= ((df[<span class="string">&quot;label&quot;</span>][i]+<span class="number">0.001</span>) / (<span class="built_in">sum</span>(df[<span class="string">&quot;label&quot;</span>][i:])+<span class="number">0.001</span>))</span><br><span class="line">         p_pred *= ((df[<span class="string">&quot;score&quot;</span>][i]+<span class="number">0.001</span>) / (<span class="built_in">sum</span>(df[<span class="string">&quot;score&quot;</span>][i:])+<span class="number">0.001</span>)) </span><br><span class="line">            </span><br><span class="line">losses[e] = tf.keras.losses.KLD(p_true, p_pred)</span><br><span class="line">        </span><br><span class="line">loss = np.mean(losses)</span><br></pre></td></tr></table></figure><p>从上面的损失函数可以看出，list-wise模型在训练和预估时：</p><ul><li>损失函数的理算是以单个query下序列整体概率分布为基础的</li><li>在预估时，对于同一个query下的多个样本，每个样本都会输出一个预估分，代表相关性，然后根据预估分进行排序</li></ul><h1 id="参考文献">参考文献</h1><p>[1].<a href="https://zhuanlan.zhihu.com/p/351716045">【总结】推荐系统——召回篇【1】</a><br />[2].<a href="https://zhuanlan.zhihu.com/p/432817787">【总结】推荐系统——精排篇【1】</a><br />[3].<a href="https://fly-adser.top/2021/12/29/sortEquation/">多约束条件下的排序算法设计</a><br />[4].<a href="https://arxiv.org/abs/1904.06813">Personalized Re-ranking for Recommendation</a><br />[5].<a href="https://arxiv.org/abs/1810.02019">Seq2Slate: Re-ranking and Slate Optimization with RNNs</a><br />[6].<a href="https://github.com/fly-adser/tensorflow-LTR">github of fly adser. tensorflow-LTR</a><br />[7].<a href="https://zhuanlan.zhihu.com/p/66514492">Learning to Rank学习笔记--ListwiseRank</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上一篇文章，&lt;a href=&quot;https://fly-adser.top/2021/12/30/LTRpartA/#more&quot;&gt;LTR预估: 从慕名而来到一探深浅&lt;/a&gt;，介绍了LTR预估建模的主要思路和一些经典算法。但是，算法理论到实际应用之间还存在一段距离，比如，样本如</summary>
      
    
    
    
    <category term="LTR预估" scheme="http://fly-adser.top/categories/LTR%E9%A2%84%E4%BC%B0/"/>
    
    
    <category term="机器学习" scheme="http://fly-adser.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="LTR预估" scheme="http://fly-adser.top/tags/LTR%E9%A2%84%E4%BC%B0/"/>
    
  </entry>
  
  <entry>
    <title>02.两数相加</title>
    <link href="http://fly-adser.top/2022/02/06/leetcode02/"/>
    <id>http://fly-adser.top/2022/02/06/leetcode02/</id>
    <published>2022-02-06T03:14:21.000Z</published>
    <updated>2022-02-06T03:16:13.048Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。<a href="https://leetcode-cn.com/problems/add-two-numbers/">题目链接</a> <span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span>(<span class="params">self, l1, l2</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type l1: ListNode</span></span><br><span class="line"><span class="string">        :type l2: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        ant = <span class="number">0</span></span><br><span class="line">        cnt = <span class="number">0</span></span><br><span class="line">        res = l1 </span><br><span class="line">        pre = l1</span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> l2 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            ant = (l1.val + l2.val + cnt) % <span class="number">10</span> </span><br><span class="line">            cnt = (l1.val + l2.val + cnt) // <span class="number">10</span></span><br><span class="line">            l1.val = ant </span><br><span class="line">            pre = l1 </span><br><span class="line">            l1  = l1.<span class="built_in">next</span></span><br><span class="line">            l2  = l2.<span class="built_in">next</span> </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            ant = (l1.val + cnt) % <span class="number">10</span> </span><br><span class="line">            cnt = (l1.val + cnt) // <span class="number">10</span></span><br><span class="line">            l1.val = ant</span><br><span class="line">            pre = l1 </span><br><span class="line">            l1  = l1.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> l1 <span class="keyword">is</span> <span class="literal">None</span>: l1 = pre </span><br><span class="line">        <span class="keyword">while</span> l2 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            ant = (l2.val + cnt) % <span class="number">10</span> </span><br><span class="line">            cnt = (l2.val + cnt) // <span class="number">10</span></span><br><span class="line">            node = ListNode(ant)</span><br><span class="line">            l1.<span class="built_in">next</span> = node</span><br><span class="line">            pre = l1  </span><br><span class="line">            l1  = l1.<span class="built_in">next</span></span><br><span class="line">            l2  = l2.<span class="built_in">next</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> l1 <span class="keyword">is</span> <span class="literal">None</span>: l1 = pre </span><br><span class="line">        <span class="keyword">if</span> cnt &gt; <span class="number">0</span>:</span><br><span class="line">            node = ListNode(cnt)</span><br><span class="line">            l1.<span class="built_in">next</span> = node </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。&lt;a href=&quot;https://leetcode-cn.com/problems/add-two-numbers/&quot;&gt;题目链接&lt;/a&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="链表" scheme="http://fly-adser.top/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="Hot100" scheme="http://fly-adser.top/tags/Hot100/"/>
    
  </entry>
  
  <entry>
    <title>01.两数之和</title>
    <link href="http://fly-adser.top/2022/02/06/leetcode01/"/>
    <id>http://fly-adser.top/2022/02/06/leetcode01/</id>
    <published>2022-02-06T03:10:55.000Z</published>
    <updated>2022-02-06T03:13:54.089Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target 的那 两个 整数，并返回它们的数组下标。<a href="https://leetcode-cn.com/problems/two-sum/">题目链接</a> <span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, nums, target</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        dic = &#123;&#125;</span><br><span class="line">        res = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            <span class="keyword">if</span> num <span class="keyword">in</span> dic:</span><br><span class="line">                res.append(dic[num])</span><br><span class="line">                res.append(i)</span><br><span class="line">                <span class="keyword">break</span> </span><br><span class="line">            </span><br><span class="line">            value = target - num </span><br><span class="line">            dic[value] = i</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target 的那 两个 整数，并返回它们的数组下标。&lt;a href=&quot;https://leetcode-cn.com/problems/two-sum/&quot;&gt;题目链接&lt;/a&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="数学" scheme="http://fly-adser.top/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="Hot100" scheme="http://fly-adser.top/tags/Hot100/"/>
    
  </entry>
  
  <entry>
    <title>400.数字序列中某一位的数字</title>
    <link href="http://fly-adser.top/2022/02/04/leetcode400/"/>
    <id>http://fly-adser.top/2022/02/04/leetcode400/</id>
    <published>2022-02-04T09:10:08.000Z</published>
    <updated>2022-02-04T09:12:54.033Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>数字以0123456789101112131415…的格式序列化到一个字符序列中。在这个序列中，第5位（从下标0开始计数）是5，第13位是1，第19位是4，等等。<a href="https://leetcode-cn.com/problems/shu-zi-xu-lie-zhong-mou-yi-wei-de-shu-zi-lcof/">题目链接</a> <span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findNthDigit</span>(<span class="params">self, n</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        digit, start, count = <span class="number">1</span>, <span class="number">1</span>, <span class="number">9</span> </span><br><span class="line">        <span class="keyword">while</span> n&gt;count:</span><br><span class="line">            n -= count </span><br><span class="line">            start *= <span class="number">10</span> </span><br><span class="line">            digit += <span class="number">1</span></span><br><span class="line">            count = <span class="number">9</span> * start * digit </span><br><span class="line">        </span><br><span class="line">        num = start + (n-<span class="number">1</span>) // digit </span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(<span class="built_in">str</span>(num)[(n-<span class="number">1</span>)%digit])</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;数字以0123456789101112131415…的格式序列化到一个字符序列中。在这个序列中，第5位（从下标0开始计数）是5，第13位是1，第19位是4，等等。&lt;a href=&quot;https://leetcode-cn.com/problems/shu-zi-xu-lie-zhong-mou-yi-wei-de-shu-zi-lcof/&quot;&gt;题目链接&lt;/a&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="剑指offer" scheme="http://fly-adser.top/tags/%E5%89%91%E6%8C%87offer/"/>
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="数学" scheme="http://fly-adser.top/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>233.1~n整数中1出现的次数</title>
    <link href="http://fly-adser.top/2022/02/04/leetcode233/"/>
    <id>http://fly-adser.top/2022/02/04/leetcode233/</id>
    <published>2022-02-04T09:07:28.000Z</published>
    <updated>2022-02-04T09:09:43.450Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>输入一个整数 n ，求1～n这n个整数的十进制表示中1出现的次数。<a href="https://leetcode-cn.com/problems/1nzheng-shu-zhong-1chu-xian-de-ci-shu-lcof/">题目链接</a><br /><span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countDigitOne</span>(<span class="params">self, n</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        digit, res = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">        high, cur, low = n//<span class="number">10</span>, n%<span class="number">10</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> high!=<span class="number">0</span> <span class="keyword">or</span> cur!=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> cur==<span class="number">0</span>:</span><br><span class="line">                res += high*digit </span><br><span class="line">            <span class="keyword">elif</span> cur==<span class="number">1</span>:</span><br><span class="line">                res += high*digit + low + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res += (high+<span class="number">1</span>)*digit </span><br><span class="line">            </span><br><span class="line">            low += cur*digit </span><br><span class="line">            cur  = high % <span class="number">10</span></span><br><span class="line">            high = high // <span class="number">10</span></span><br><span class="line">            digit *= <span class="number">10</span> </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;输入一个整数 n ，求1～n这n个整数的十进制表示中1出现的次数。&lt;a href=&quot;https://leetcode-cn.com/problems/1nzheng-shu-zhong-1chu-xian-de-ci-shu-lcof/&quot;&gt;题目链接&lt;/a&gt;&lt;br /&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="剑指offer" scheme="http://fly-adser.top/tags/%E5%89%91%E6%8C%87offer/"/>
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="数学" scheme="http://fly-adser.top/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>343.剪绳子II</title>
    <link href="http://fly-adser.top/2022/02/04/leetcode343-1/"/>
    <id>http://fly-adser.top/2022/02/04/leetcode343-1/</id>
    <published>2022-02-04T08:51:10.000Z</published>
    <updated>2022-02-04T09:06:57.653Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n&gt;1并且m&gt;1），每段绳子的长度记为 k[0],k[1]...k[m - 1] 。请问 k[0]<em>k[1]</em>...*k[m - 1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18</p><p>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。<a href="https://leetcode-cn.com/problems/jian-sheng-zi-ii-lcof/">题目链接</a> <span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cuttingRope</span>(<span class="params">self, n</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">2</span>: <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">3</span>: <span class="keyword">return</span> <span class="number">2</span> </span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">4</span>: <span class="keyword">return</span> <span class="number">4</span> </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> n%<span class="number">3</span>==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">pow</span>(<span class="number">3</span>, n // <span class="number">3</span>) % <span class="number">1000000007</span> </span><br><span class="line">        <span class="keyword">if</span> n%<span class="number">3</span>==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">pow</span>(<span class="number">3</span>, n // <span class="number">3</span> - <span class="number">1</span>) * <span class="number">4</span> % <span class="number">1000000007</span>  </span><br><span class="line">        <span class="keyword">if</span> n%<span class="number">3</span>==<span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">pow</span>(<span class="number">3</span>, n // <span class="number">3</span>) * <span class="number">2</span> % <span class="number">1000000007</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n&amp;gt;1并且m&amp;gt;1），每段绳子的长度记为 k[0],k[1]...k[m - 1] 。请问 k[0]&lt;em&gt;k[1]&lt;/em&gt;...*k[m - 1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18&lt;/p&gt;
&lt;p&gt;答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。&lt;a href=&quot;https://leetcode-cn.com/problems/jian-sheng-zi-ii-lcof/&quot;&gt;题目链接&lt;/a&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="剑指offer" scheme="http://fly-adser.top/tags/%E5%89%91%E6%8C%87offer/"/>
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="数学" scheme="http://fly-adser.top/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>51.数组中的逆序对</title>
    <link href="http://fly-adser.top/2022/02/04/leetcodesd51/"/>
    <id>http://fly-adser.top/2022/02/04/leetcodesd51/</id>
    <published>2022-02-04T08:48:48.000Z</published>
    <updated>2022-02-04T08:50:44.710Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组，求出这个数组中的逆序对的总数。<a href="https://leetcode-cn.com/problems/shu-zu-zhong-de-ni-xu-dui-lcof/">题目链接</a> <span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reversePairs</span>(<span class="params">self, nums</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.res = <span class="number">0</span></span><br><span class="line">        self.mergeSort(nums, <span class="number">0</span>, <span class="built_in">len</span>(nums)-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.res </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeSort</span>(<span class="params">self, nums, left, right</span>):</span></span><br><span class="line">        <span class="keyword">if</span> left&gt;=right: <span class="keyword">return</span> </span><br><span class="line">        </span><br><span class="line">        mid = left + (right - left) // <span class="number">2</span> </span><br><span class="line">        self.mergeSort(nums, left, mid)</span><br><span class="line">        self.mergeSort(nums, mid+<span class="number">1</span>, right)</span><br><span class="line">        self.merge(nums, left, mid, right) </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span>(<span class="params">self, nums, left, mid, right</span>):</span></span><br><span class="line">        <span class="keyword">if</span> left&gt;=right: <span class="keyword">return</span> </span><br><span class="line"></span><br><span class="line">        helper = [<span class="number">0</span>] * (right-left+<span class="number">1</span>)</span><br><span class="line">        i, j, k = left, mid+<span class="number">1</span>, <span class="number">0</span> </span><br><span class="line">        <span class="keyword">while</span> i&lt;=mid <span class="keyword">and</span> j&lt;=right:</span><br><span class="line">            <span class="keyword">if</span> nums[i]&gt;nums[j]:</span><br><span class="line">                self.res += (right-j+<span class="number">1</span>)</span><br><span class="line">                helper[k] = nums[i]</span><br><span class="line">                k += <span class="number">1</span></span><br><span class="line">                i += <span class="number">1</span> </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                helper[k] = nums[j]</span><br><span class="line">                k += <span class="number">1</span></span><br><span class="line">                j += <span class="number">1</span> </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> i&lt;=mid:</span><br><span class="line">            helper[k] = nums[i]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> j&lt;=right:</span><br><span class="line">            helper[k] = nums[j]</span><br><span class="line">            j += <span class="number">1</span> </span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, right-left+<span class="number">1</span>):</span><br><span class="line">            nums[left+i] = helper[i]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组，求出这个数组中的逆序对的总数。&lt;a href=&quot;https://leetcode-cn.com/problems/shu-zu-zhong-de-ni-xu-dui-lcof/&quot;&gt;题目链接&lt;/a&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="剑指offer" scheme="http://fly-adser.top/tags/%E5%89%91%E6%8C%87offer/"/>
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="动态规划" scheme="http://fly-adser.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>17.打印从1到最大的n位数</title>
    <link href="http://fly-adser.top/2022/02/04/leetcodesd17/"/>
    <id>http://fly-adser.top/2022/02/04/leetcodesd17/</id>
    <published>2022-02-04T08:27:32.000Z</published>
    <updated>2022-02-04T08:48:19.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>输入数字 n，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、3 一直到最大的 3 位数 999。<a href="https://leetcode-cn.com/problems/da-yin-cong-1dao-zui-da-de-nwei-shu-lcof/">题目链接</a> <span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printNumbers</span>(<span class="params">self, n</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.num, self.res = [<span class="string">&#x27;0&#x27;</span>]*n, []</span><br><span class="line">        self.n = n </span><br><span class="line">        self.nine = <span class="number">0</span></span><br><span class="line">        self.start = n-<span class="number">1</span> </span><br><span class="line">        self.dfs(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.res</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="keyword">if</span> x==self.n:</span><br><span class="line">            s = <span class="string">&#x27;&#x27;</span>.join(self.num[self.start:])</span><br><span class="line">            <span class="keyword">if</span> s!=<span class="string">&#x27;0&#x27;</span>: self.res.append(s)</span><br><span class="line">            <span class="keyword">if</span> self.n-self.start==self.nine: self.start -=<span class="number">1</span> </span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">            <span class="keyword">if</span> i==<span class="number">9</span>: self.nine += <span class="number">1</span> </span><br><span class="line">            self.num[x] = <span class="built_in">str</span>(i)</span><br><span class="line">            self.dfs(x+<span class="number">1</span>)</span><br><span class="line">        self.nine -= <span class="number">1</span> </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;输入数字 n，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、3 一直到最大的 3 位数 999。&lt;a href=&quot;https://leetcode-cn.com/problems/da-yin-cong-1dao-zui-da-de-nwei-shu-lcof/&quot;&gt;题目链接&lt;/a&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="剑指offer" scheme="http://fly-adser.top/tags/%E5%89%91%E6%8C%87offer/"/>
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="分治算法" scheme="http://fly-adser.top/tags/%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>60.n个骰子的点数</title>
    <link href="http://fly-adser.top/2022/02/04/leetcodesd60/"/>
    <id>http://fly-adser.top/2022/02/04/leetcodesd60/</id>
    <published>2022-02-04T08:22:49.000Z</published>
    <updated>2022-02-04T08:26:53.490Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>把n个骰子扔在地上，所有骰子朝上一面的点数之和为s。输入n，打印出s的所有可能的值出现的概率。<a href="https://leetcode-cn.com/problems/nge-tou-zi-de-dian-shu-lcof/">题目链接</a> <span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dicesProbability</span>(<span class="params">self, n</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: List[float]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        dp = [<span class="number">1.0</span> / <span class="number">6</span>] * <span class="number">6</span> </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n+<span class="number">1</span>):</span><br><span class="line">            tmp = [<span class="number">0</span>]*(<span class="number">5</span>*i+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(dp)):</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">6</span>):</span><br><span class="line">                    tmp[j+k] += dp[j] / <span class="number">6</span> </span><br><span class="line">                </span><br><span class="line">            dp = tmp </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;把n个骰子扔在地上，所有骰子朝上一面的点数之和为s。输入n，打印出s的所有可能的值出现的概率。&lt;a href=&quot;https://leetcode-cn.com/problems/nge-tou-zi-de-dian-shu-lcof/&quot;&gt;题目链接&lt;/a&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="剑指offer" scheme="http://fly-adser.top/tags/%E5%89%91%E6%8C%87offer/"/>
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="动态规划" scheme="http://fly-adser.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>264.丑数</title>
    <link href="http://fly-adser.top/2022/02/04/leetcode264/"/>
    <id>http://fly-adser.top/2022/02/04/leetcode264/</id>
    <published>2022-02-04T08:19:02.000Z</published>
    <updated>2022-02-04T08:22:13.280Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>我们把只包含质因子 2、3 和 5 的数称作丑数（Ugly Number）。求按从小到大的顺序的第 n 个丑数。<a href="https://leetcode-cn.com/problems/chou-shu-lcof/">题目链接</a> <span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nthUglyNumber</span>(<span class="params">self, n</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        dp, a, b, c = [<span class="number">1</span>]*n, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">            n1, n2, n3 = dp[a]*<span class="number">2</span>, dp[b]*<span class="number">3</span>, dp[c]*<span class="number">5</span></span><br><span class="line">            dp[i] = <span class="built_in">min</span>(n1, n2, n3)</span><br><span class="line">            <span class="keyword">if</span> dp[i]==n1: a += <span class="number">1</span> </span><br><span class="line">            <span class="keyword">if</span> dp[i]==n2: b += <span class="number">1</span> </span><br><span class="line">            <span class="keyword">if</span> dp[i]==n3: c += <span class="number">1</span> </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;我们把只包含质因子 2、3 和 5 的数称作丑数（Ugly Number）。求按从小到大的顺序的第 n 个丑数。&lt;a href=&quot;https://leetcode-cn.com/problems/chou-shu-lcof/&quot;&gt;题目链接&lt;/a&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="剑指offer" scheme="http://fly-adser.top/tags/%E5%89%91%E6%8C%87offer/"/>
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="动态规划" scheme="http://fly-adser.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>10.正则表达式匹配</title>
    <link href="http://fly-adser.top/2022/02/04/leetcode10/"/>
    <id>http://fly-adser.top/2022/02/04/leetcode10/</id>
    <published>2022-02-04T08:15:40.000Z</published>
    <updated>2022-02-04T08:18:35.711Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>请实现一个函数用来匹配包含'. '和'<em>'的正则表达式。模式中的字符'.'表示任意一个字符，而'</em>'表示它前面的字符可以出现任意次（含0次）。在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串"aaa"与模式"a.a"和"ab<em>ac</em>a"匹配，但与"aa.a"和"ab*a"均不匹配。<a href="https://leetcode-cn.com/problems/zheng-ze-biao-da-shi-pi-pei-lcof/">题目链接</a> <span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isMatch</span>(<span class="params">self, s, p</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :type p: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        m, n = <span class="built_in">len</span>(s)+<span class="number">1</span>, <span class="built_in">len</span>(p)+<span class="number">1</span> </span><br><span class="line">        dp = [[<span class="literal">False</span>]*n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">True</span> </span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n, <span class="number">2</span>):</span><br><span class="line">            dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j-<span class="number">2</span>] <span class="keyword">and</span> p[j-<span class="number">1</span>]==<span class="string">&#x27;*&#x27;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">                <span class="keyword">if</span> p[j-<span class="number">1</span>]==<span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                    <span class="keyword">if</span> dp[i][j-<span class="number">2</span>] <span class="keyword">or</span> (dp[i-<span class="number">1</span>][j] <span class="keyword">and</span> s[i-<span class="number">1</span>]==p[j-<span class="number">2</span>]) <span class="keyword">or</span> (dp[i-<span class="number">1</span>][j] <span class="keyword">and</span> p[j-<span class="number">2</span>]==<span class="string">&#x27;.&#x27;</span>): dp[i][j]=<span class="literal">True</span> </span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> dp[i-<span class="number">1</span>][j-<span class="number">1</span>] <span class="keyword">and</span> (s[i-<span class="number">1</span>]==p[j-<span class="number">1</span>] <span class="keyword">or</span> p[j-<span class="number">1</span>]==<span class="string">&#x27;.&#x27;</span>): dp[i][j]=<span class="literal">True</span> </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[-<span class="number">1</span>][-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;请实现一个函数用来匹配包含&#39;. &#39;和&#39;&lt;em&gt;&#39;的正则表达式。模式中的字符&#39;.&#39;表示任意一个字符，而&#39;&lt;/em&gt;&#39;表示它前面的字符可以出现任意次（含0次）。在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串&quot;aaa&quot;与模式&quot;a.a&quot;和&quot;ab&lt;em&gt;ac&lt;/em&gt;a&quot;匹配，但与&quot;aa.a&quot;和&quot;ab*a&quot;均不匹配。&lt;a href=&quot;https://leetcode-cn.com/problems/zheng-ze-biao-da-shi-pi-pei-lcof/&quot;&gt;题目链接&lt;/a&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="剑指offer" scheme="http://fly-adser.top/tags/%E5%89%91%E6%8C%87offer/"/>
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="动态规划" scheme="http://fly-adser.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>38.字符串的排列</title>
    <link href="http://fly-adser.top/2022/01/31/leetcodesd38/"/>
    <id>http://fly-adser.top/2022/01/31/leetcodesd38/</id>
    <published>2022-01-31T02:15:46.000Z</published>
    <updated>2022-01-31T02:18:55.645Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>输入一个字符串，打印出该字符串中字符的所有排列。<a href="https://leetcode-cn.com/problems/zi-fu-chuan-de-pai-lie-lcof/">题目链接</a><br /><span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">permutation</span>(<span class="params">self, s</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: List[str]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.c, self.res = <span class="built_in">list</span>(s), []</span><br><span class="line">        self.dfs(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.res</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="keyword">if</span> x==<span class="built_in">len</span>(self.c)-<span class="number">1</span>:</span><br><span class="line">            self.res.append(<span class="string">&#x27;&#x27;</span>.join(self.c))</span><br><span class="line">        </span><br><span class="line">        <span class="type">Set</span> = <span class="built_in">set</span>()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x, <span class="built_in">len</span>(self.c)):</span><br><span class="line">            <span class="keyword">if</span> self.c[i] <span class="keyword">in</span> <span class="type">Set</span>: <span class="keyword">continue</span> </span><br><span class="line">            <span class="type">Set</span>.add(self.c[i])</span><br><span class="line">            self.c[i], self.c[x] = self.c[x], self.c[i]</span><br><span class="line">            self.dfs(x+<span class="number">1</span>)</span><br><span class="line">            self.c[i], self.c[x] = self.c[x], self.c[i]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;输入一个字符串，打印出该字符串中字符的所有排列。&lt;a href=&quot;https://leetcode-cn.com/problems/zi-fu-chuan-de-pai-lie-lcof/&quot;&gt;题目链接&lt;/a&gt;&lt;br /&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="剑指offer" scheme="http://fly-adser.top/tags/%E5%89%91%E6%8C%87offer/"/>
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="搜索与回溯算法" scheme="http://fly-adser.top/tags/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>297.序列化二叉树</title>
    <link href="http://fly-adser.top/2022/01/31/leetcode297/"/>
    <id>http://fly-adser.top/2022/01/31/leetcode297/</id>
    <published>2022-01-31T02:08:29.000Z</published>
    <updated>2022-01-31T02:15:51.680Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>请实现两个函数，分别用来序列化和反序列化二叉树。<a href="https://leetcode-cn.com/problems/xu-lie-hua-er-cha-shu-lcof/">题目链接</a> <span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Codec</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serialize</span>(<span class="params">self, root</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Encodes a tree to a single string.       ·</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>: <span class="keyword">return</span> <span class="string">&quot;#!&quot;</span></span><br><span class="line"></span><br><span class="line">        res = <span class="built_in">str</span>(root.val) + <span class="string">&quot;!&quot;</span></span><br><span class="line">        res += self.serialize(root.left)</span><br><span class="line">        res += self.serialize(root.right)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deserialize</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Decodes your encoded data to tree.</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        :type data: str</span></span><br><span class="line"><span class="string">        :rtype: TreeNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        stack    = []</span><br><span class="line">        values   = data.split(<span class="string">&quot;!&quot;</span>)[<span class="number">0</span>:-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(values)==<span class="number">1</span> <span class="keyword">and</span> values[<span class="number">0</span>]==<span class="string">&quot;#&quot;</span>: <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        root     = <span class="literal">None</span> </span><br><span class="line">        treeNode = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> index&lt;<span class="built_in">len</span>(values):</span><br><span class="line">            <span class="keyword">while</span> index&lt;<span class="built_in">len</span>(values) <span class="keyword">and</span> values[index]!=<span class="string">&quot;#&quot;</span>:</span><br><span class="line">                treeNode = TreeNode(values[index])</span><br><span class="line">                <span class="keyword">if</span> index==<span class="number">0</span>:</span><br><span class="line">                    root = treeNode </span><br><span class="line">                    index += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    stack[-<span class="number">1</span>].left = treeNode </span><br><span class="line">                    index += <span class="number">1</span></span><br><span class="line">                stack.append(treeNode)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> index&lt;<span class="built_in">len</span>(values) <span class="keyword">and</span> values[index]==<span class="string">&quot;#&quot;</span> <span class="keyword">and</span> <span class="built_in">len</span>(stack)&gt;<span class="number">0</span>:</span><br><span class="line">                treeNode = stack.pop()</span><br><span class="line">                index   += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> values[index]==<span class="string">&quot;#&quot;</span>:</span><br><span class="line">                    <span class="keyword">if</span> index==<span class="built_in">len</span>(values)-<span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">return</span> root </span><br><span class="line">                    <span class="keyword">continue</span> </span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    treeNode.right = TreeNode(values[index])</span><br><span class="line">                    stack.append(treeNode.right)</span><br><span class="line">                    index += <span class="number">1</span> </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> root </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;请实现两个函数，分别用来序列化和反序列化二叉树。&lt;a href=&quot;https://leetcode-cn.com/problems/xu-lie-hua-er-cha-shu-lcof/&quot;&gt;题目链接&lt;/a&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="剑指offer" scheme="http://fly-adser.top/tags/%E5%89%91%E6%8C%87offer/"/>
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="搜索与回溯算法" scheme="http://fly-adser.top/tags/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>59.队列的最大值</title>
    <link href="http://fly-adser.top/2022/01/30/leetcodesd69/"/>
    <id>http://fly-adser.top/2022/01/30/leetcodesd69/</id>
    <published>2022-01-30T15:48:43.000Z</published>
    <updated>2022-01-30T15:51:11.716Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>请定义一个队列并实现函数 max_value 得到队列里的最大值，要求函数max_value、push_back 和 pop_front 的均摊时间复杂度都是O(1)。<a href="https://leetcode-cn.com/problems/dui-lie-de-zui-da-zhi-lcof/">题目链接</a> <span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MaxQueue</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.queue = queue.Queue()</span><br><span class="line">        self.deque = queue.deque()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">max_value</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.deque[<span class="number">0</span>] <span class="keyword">if</span> self.deque <span class="keyword">else</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push_back</span>(<span class="params">self, value: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        self.queue.put(value)</span><br><span class="line">        <span class="keyword">while</span> self.deque <span class="keyword">and</span> self.deque[-<span class="number">1</span>] &lt; value:</span><br><span class="line">            self.deque.pop()</span><br><span class="line">        self.deque.append(value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop_front</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.queue.empty(): <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        val = self.queue.get()</span><br><span class="line">        <span class="keyword">if</span> val == self.deque[<span class="number">0</span>]:</span><br><span class="line">            self.deque.popleft()</span><br><span class="line">        <span class="keyword">return</span> val</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;请定义一个队列并实现函数 max_value 得到队列里的最大值，要求函数max_value、push_back 和 pop_front 的均摊时间复杂度都是O(1)。&lt;a href=&quot;https://leetcode-cn.com/problems/dui-lie-de-zui-da-zhi-lcof/&quot;&gt;题目链接&lt;/a&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="剑指offer" scheme="http://fly-adser.top/tags/%E5%89%91%E6%8C%87offer/"/>
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="栈与队列" scheme="http://fly-adser.top/tags/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>239.滑动窗口的最大值</title>
    <link href="http://fly-adser.top/2022/01/30/leetcode239/"/>
    <id>http://fly-adser.top/2022/01/30/leetcode239/</id>
    <published>2022-01-30T15:46:25.000Z</published>
    <updated>2022-01-30T15:51:16.371Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>给定一个数组 nums 和滑动窗口的大小 k，请找出所有滑动窗口里的最大值。<a href="https://leetcode-cn.com/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof/">题目链接</a> <span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxSlidingWindow</span>(<span class="params">self, nums, k</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type k: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        deque = collections.deque()</span><br><span class="line">        res, n = [], <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="built_in">range</span>(<span class="number">1</span>-k, n+<span class="number">1</span>-k), <span class="built_in">range</span>(n)):</span><br><span class="line">            <span class="keyword">if</span> i&gt;<span class="number">0</span> <span class="keyword">and</span> deque[<span class="number">0</span>]==nums[i-<span class="number">1</span>]:</span><br><span class="line">                deque.popleft() </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> <span class="built_in">len</span>(deque)&gt;<span class="number">0</span> <span class="keyword">and</span> deque[-<span class="number">1</span>]&lt;nums[j]:</span><br><span class="line">                deque.pop()</span><br><span class="line">            deque.append(nums[j])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> i&gt;=<span class="number">0</span>:</span><br><span class="line">                res.append(deque[<span class="number">0</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;给定一个数组 nums 和滑动窗口的大小 k，请找出所有滑动窗口里的最大值。&lt;a href=&quot;https://leetcode-cn.com/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof/&quot;&gt;题目链接&lt;/a&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="剑指offer" scheme="http://fly-adser.top/tags/%E5%89%91%E6%8C%87offer/"/>
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="栈与队列" scheme="http://fly-adser.top/tags/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>8.把字符串转换成整数</title>
    <link href="http://fly-adser.top/2022/01/30/leetcode8/"/>
    <id>http://fly-adser.top/2022/01/30/leetcode8/</id>
    <published>2022-01-30T15:43:51.000Z</published>
    <updated>2022-01-30T15:45:49.368Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>写一个函数 StrToInt，实现把字符串转换成整数这个功能。不能使用 atoi 或者其他类似的库函数。<a href="https://leetcode-cn.com/problems/ba-zi-fu-chuan-zhuan-huan-cheng-zheng-shu-lcof/">题目</a> <span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">strToInt</span>(<span class="params">self, <span class="built_in">str</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type str: str</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">str</span> = <span class="built_in">str</span>.strip()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">str</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        res, int_max, int_min, bodary = <span class="number">0</span>, <span class="number">2</span>**<span class="number">31</span>-<span class="number">1</span>, -<span class="number">2</span>**<span class="number">31</span>, <span class="number">2</span>**<span class="number">31</span> // <span class="number">10</span></span><br><span class="line">        i, sign = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>[<span class="number">0</span>]==<span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">            sign = -<span class="number">1</span> </span><br><span class="line">            i    = <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">str</span>[<span class="number">0</span>]==<span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">            i = <span class="number">1</span> </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">str</span>[i:]:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="string">&#x27;0&#x27;</span>&lt;=c&lt;=<span class="string">&#x27;9&#x27;</span>: <span class="keyword">break</span> </span><br><span class="line">            <span class="keyword">if</span> res&gt;bodary <span class="keyword">or</span> res==bodary <span class="keyword">and</span> c&gt;<span class="string">&#x27;7&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> int_max <span class="keyword">if</span> sign==<span class="number">1</span> <span class="keyword">else</span> int_min  </span><br><span class="line">            </span><br><span class="line">            res = res * <span class="number">10</span> + <span class="built_in">ord</span>(c) - <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> sign*res</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;写一个函数 StrToInt，实现把字符串转换成整数这个功能。不能使用 atoi 或者其他类似的库函数。&lt;a href=&quot;https://leetcode-cn.com/problems/ba-zi-fu-chuan-zhuan-huan-cheng-zheng-shu-lcof/&quot;&gt;题目&lt;/a&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="剑指offer" scheme="http://fly-adser.top/tags/%E5%89%91%E6%8C%87offer/"/>
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="字符串" scheme="http://fly-adser.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>20.表示数值的字符串</title>
    <link href="http://fly-adser.top/2022/01/30/leetcodesd20/"/>
    <id>http://fly-adser.top/2022/01/30/leetcodesd20/</id>
    <published>2022-01-30T15:41:09.000Z</published>
    <updated>2022-01-30T15:44:09.073Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。<a href="https://leetcode-cn.com/problems/biao-shi-shu-zhi-de-zi-fu-chuan-lcof/">题目</a> <span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isNumber</span>(<span class="params">self, s</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        states = [</span><br><span class="line">            &#123;<span class="string">&#x27; &#x27;</span>:<span class="number">0</span>, <span class="string">&#x27;s&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;d&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;.&#x27;</span>:<span class="number">4</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;d&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;.&#x27;</span>:<span class="number">4</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;d&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;.&#x27;</span>:<span class="number">3</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27; &#x27;</span>:<span class="number">8</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;d&#x27;</span>:<span class="number">3</span>, <span class="string">&#x27;e&#x27;</span>:<span class="number">5</span>, <span class="string">&#x27; &#x27;</span>:<span class="number">8</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;d&#x27;</span>:<span class="number">3</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;s&#x27;</span>:<span class="number">6</span>, <span class="string">&#x27;d&#x27;</span>:<span class="number">7</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;d&#x27;</span>:<span class="number">7</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;d&#x27;</span>:<span class="number">7</span>, <span class="string">&#x27; &#x27;</span>:<span class="number">8</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27; &#x27;</span>:<span class="number">8</span>&#125;</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        p = <span class="number">0</span> </span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;0&#x27;</span>&lt;=c&lt;=<span class="string">&#x27;9&#x27;</span>: t=<span class="string">&#x27;d&#x27;</span></span><br><span class="line">            <span class="keyword">elif</span> c <span class="keyword">in</span> <span class="string">&#x27;. &#x27;</span>: t=c</span><br><span class="line">            <span class="keyword">elif</span> c <span class="keyword">in</span> <span class="string">&#x27;eE&#x27;</span>: t=<span class="string">&#x27;e&#x27;</span></span><br><span class="line">            <span class="keyword">elif</span> c <span class="keyword">in</span> <span class="string">&#x27;+-&#x27;</span>: t=<span class="string">&#x27;s&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>: t=<span class="string">&#x27;?&#x27;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> t <span class="keyword">not</span> <span class="keyword">in</span> states[p] : <span class="keyword">return</span> <span class="literal">False</span> </span><br><span class="line">            p = states[p][t]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> p <span class="keyword">in</span> (<span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">8</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。&lt;a href=&quot;https://leetcode-cn.com/problems/biao-shi-shu-zhi-de-zi-fu-chuan-lcof/&quot;&gt;题目&lt;/a&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="剑指offer" scheme="http://fly-adser.top/tags/%E5%89%91%E6%8C%87offer/"/>
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="字符串" scheme="http://fly-adser.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>946.栈的压入、弹出序列</title>
    <link href="http://fly-adser.top/2022/01/28/leetcode946/"/>
    <id>http://fly-adser.top/2022/01/28/leetcode946/</id>
    <published>2022-01-28T14:54:11.000Z</published>
    <updated>2022-01-28T14:56:25.589Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如，序列 {1,2,3,4,5} 是某栈的压栈序列，序列 {4,5,3,2,1} 是该压栈序列对应的一个弹出序列，但 {4,3,5,1,2} 就不可能是该压栈序列的弹出序列。<a href="https://leetcode-cn.com/problems/zhan-de-ya-ru-dan-chu-xu-lie-lcof/">题目链接</a> <span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validateStackSequences</span>(<span class="params">self, pushed, popped</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type pushed: List[int]</span></span><br><span class="line"><span class="string">        :type popped: List[int]</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        stack, i = [], <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> pushed:</span><br><span class="line">            stack.append(num)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> stack <span class="keyword">and</span> stack[-<span class="number">1</span>]==popped[i]:</span><br><span class="line">                stack.pop()</span><br><span class="line">                i += <span class="number">1</span> </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> stack</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如，序列 {1,2,3,4,5} 是某栈的压栈序列，序列 {4,5,3,2,1} 是该压栈序列对应的一个弹出序列，但 {4,3,5,1,2} 就不可能是该压栈序列的弹出序列。&lt;a href=&quot;https://leetcode-cn.com/problems/zhan-de-ya-ru-dan-chu-xu-lie-lcof/&quot;&gt;题目链接&lt;/a&gt;</summary>
    
    
    
    
    <category term="剑指offer" scheme="http://fly-adser.top/tags/%E5%89%91%E6%8C%87offer/"/>
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="模拟" scheme="http://fly-adser.top/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>29.顺时针打印矩阵</title>
    <link href="http://fly-adser.top/2022/01/28/leetcode29/"/>
    <id>http://fly-adser.top/2022/01/28/leetcode29/</id>
    <published>2022-01-28T14:51:07.000Z</published>
    <updated>2022-01-28T14:53:21.158Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。<a href="https://leetcode-cn.com/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/">题目链接</a><br /><span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spiralOrder</span>(<span class="params">self, matrix</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type matrix: List[List[int]]</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        res       = []</span><br><span class="line">        <span class="keyword">if</span> matrix==[] <span class="keyword">or</span> matrix <span class="keyword">is</span> <span class="literal">None</span>: <span class="keyword">return</span> res </span><br><span class="line">        left, low = <span class="number">0</span>, <span class="number">0</span> </span><br><span class="line">        right, up = <span class="built_in">len</span>(matrix[<span class="number">0</span>])-<span class="number">1</span>, <span class="built_in">len</span>(matrix)-<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(left, right+<span class="number">1</span>):</span><br><span class="line">                res.append(matrix[low][i])</span><br><span class="line">            low += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> low&gt;up: <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(low, up+<span class="number">1</span>):</span><br><span class="line">                res.append(matrix[j][right])</span><br><span class="line">            right -= <span class="number">1</span> </span><br><span class="line">            <span class="keyword">if</span> left&gt;right: <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(right, left-<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">                res.append(matrix[up][l])</span><br><span class="line">            up -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> low&gt;up: <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(up, low-<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">                res.append(matrix[k][left])</span><br><span class="line">            left += <span class="number">1</span> </span><br><span class="line">            <span class="keyword">if</span> left&gt;right: <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。&lt;a href=&quot;https://leetcode-cn.com/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/&quot;&gt;题目链接&lt;/a&gt;&lt;br /&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="剑指offer" scheme="http://fly-adser.top/tags/%E5%89%91%E6%8C%87offer/"/>
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="模拟" scheme="http://fly-adser.top/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>62.圆圈中最后剩下的数字</title>
    <link href="http://fly-adser.top/2022/01/27/leetcode62/"/>
    <id>http://fly-adser.top/2022/01/27/leetcode62/</id>
    <published>2022-01-27T14:58:34.000Z</published>
    <updated>2022-01-27T15:02:26.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>0,1,···,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字（删除后从下一个数字开始计数）。求出这个圆圈里剩下的最后一个数字。<a href="https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/">题目链接</a> <span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lastRemaining</span>(<span class="params">self, n, m</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :type m: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        f = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line">            f = (m + f) % i</span><br><span class="line">        <span class="keyword">return</span> f</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;0,1,···,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字（删除后从下一个数字开始计数）。求出这个圆圈里剩下的最后一个数字。&lt;a href=&quot;https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/&quot;&gt;题目链接&lt;/a&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="剑指offer" scheme="http://fly-adser.top/tags/%E5%89%91%E6%8C%87offer/"/>
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="数学" scheme="http://fly-adser.top/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
</feed>
