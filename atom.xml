<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fly Adser</title>
  
  <subtitle>一个广告策略算法工程师的学习笔记</subtitle>
  <link href="http://fly-adser.top/atom.xml" rel="self"/>
  
  <link href="http://fly-adser.top/"/>
  <updated>2022-02-19T13:18:14.388Z</updated>
  <id>http://fly-adser.top/</id>
  
  <author>
    <name>Fly Adser</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>76.最小覆盖子串</title>
    <link href="http://fly-adser.top/2022/02/19/leetcode76/"/>
    <id>http://fly-adser.top/2022/02/19/leetcode76/</id>
    <published>2022-02-19T13:16:18.000Z</published>
    <updated>2022-02-19T13:18:14.388Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>给你一个字符串 s 、一个字符串 t 。返回 s 中涵盖 t 所有字符的最小子串。如果 s 中不存在涵盖 t 所有字符的子串，则返回空字符串 "" 。<a href="https://leetcode-cn.com/problems/minimum-window-substring/">题目链接</a> <span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minWindow</span>(<span class="params">self, s, t</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :type t: str</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        sLen, tLen = <span class="built_in">len</span>(s), <span class="built_in">len</span>(t)</span><br><span class="line">        <span class="keyword">if</span> sLen&lt;=<span class="number">0</span> <span class="keyword">or</span> tLen&lt;=<span class="number">0</span> <span class="keyword">or</span> sLen&lt;tLen: <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">        sMap, tMap = collections.defaultdict(<span class="keyword">lambda</span>: <span class="number">0</span>), collections.defaultdict(<span class="keyword">lambda</span>: <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> t:</span><br><span class="line">            tMap[c] += <span class="number">1</span> </span><br><span class="line">        </span><br><span class="line">        distince    = <span class="number">0</span></span><br><span class="line">        left, right = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        begin       = <span class="number">0</span> </span><br><span class="line">        minLen      = sLen + <span class="number">1</span> </span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> right <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, sLen):</span><br><span class="line">            <span class="keyword">if</span> s[right] <span class="keyword">not</span> <span class="keyword">in</span> tMap:</span><br><span class="line">                right += <span class="number">1</span> </span><br><span class="line">                <span class="keyword">continue</span> </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> sMap[s[right]]&lt;tMap[s[right]]: </span><br><span class="line">                distince += <span class="number">1</span> </span><br><span class="line">            </span><br><span class="line">            sMap[s[right]] += <span class="number">1</span> </span><br><span class="line">            right      += <span class="number">1</span> </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> distince==tLen:</span><br><span class="line">                <span class="keyword">if</span> right - left &lt; minLen:</span><br><span class="line">                    minLen = right - left </span><br><span class="line">                    begin  = left  </span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> s[left] <span class="keyword">not</span> <span class="keyword">in</span> tMap:</span><br><span class="line">                    left += <span class="number">1</span> </span><br><span class="line">                    <span class="keyword">continue</span> </span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> sMap[s[left]]==tMap[s[left]]:</span><br><span class="line">                    distince -= <span class="number">1</span>  </span><br><span class="line">                </span><br><span class="line">                sMap[s[left]] -=<span class="number">1</span> </span><br><span class="line">                left += <span class="number">1</span> </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> minLen == sLen + <span class="number">1</span>: <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> s[begin: begin+minLen]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;给你一个字符串 s 、一个字符串 t 。返回 s 中涵盖 t 所有字符的最小子串。如果 s 中不存在涵盖 t 所有字符的子串，则返回空字符串 &quot;&quot; 。&lt;a href=&quot;https://leetcode-cn.com/problems/minimum-window-substring/&quot;&gt;题目链接&lt;/a&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="滑动窗口" scheme="http://fly-adser.top/tags/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    
    <category term="Hot100" scheme="http://fly-adser.top/tags/Hot100/"/>
    
  </entry>
  
  <entry>
    <title>75.颜色分类</title>
    <link href="http://fly-adser.top/2022/02/19/leetcode75/"/>
    <id>http://fly-adser.top/2022/02/19/leetcode75/</id>
    <published>2022-02-19T13:13:01.000Z</published>
    <updated>2022-02-19T13:15:48.690Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>给定一个包含红色、白色和蓝色、共 n 个元素的数组 nums ，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。<a href="https://leetcode-cn.com/problems/sort-colors/">题目链接</a> <span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortColors</span>(<span class="params">self, nums</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: None Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        p0 = p1 = <span class="number">0</span> </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n):</span><br><span class="line">            <span class="keyword">if</span> nums[i]==<span class="number">1</span>:</span><br><span class="line">                nums[p1], nums[i] = nums[i], nums[p1]</span><br><span class="line">                p1 += <span class="number">1</span> </span><br><span class="line">            <span class="keyword">elif</span> nums[i]==<span class="number">0</span>:</span><br><span class="line">                nums[p0], nums[i] = nums[i], nums[p0]</span><br><span class="line">                <span class="keyword">if</span> p0&lt;p1:</span><br><span class="line">                    nums[p1], nums[i] = nums[i], nums[p1] </span><br><span class="line">                </span><br><span class="line">                p0 += <span class="number">1</span> </span><br><span class="line">                p1 += <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;给定一个包含红色、白色和蓝色、共 n 个元素的数组 nums ，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。&lt;a href=&quot;https://leetcode-cn.com/problems/sort-colors/&quot;&gt;题目链接&lt;/a&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="双指针" scheme="http://fly-adser.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
    <category term="Hot100" scheme="http://fly-adser.top/tags/Hot100/"/>
    
  </entry>
  
  <entry>
    <title>72.编辑距离</title>
    <link href="http://fly-adser.top/2022/02/19/leetcode72/"/>
    <id>http://fly-adser.top/2022/02/19/leetcode72/</id>
    <published>2022-02-19T13:10:44.000Z</published>
    <updated>2022-02-19T13:12:35.761Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>给你两个单词 word1 和 word2， 请返回将 word1 转换成 word2 所使用的最少操作数。你可以对一个单词进行如下三种操作：</p><ul><li>插入一个字符</li><li>删除一个字符</li><li>替换一个字符</li></ul><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minDistance</span>(<span class="params">self, word1, word2</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type word1: str</span></span><br><span class="line"><span class="string">        :type word2: str</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        m, n = <span class="built_in">len</span>(word1)+<span class="number">1</span>, <span class="built_in">len</span>(word2)+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> m*n&lt;=<span class="number">0</span>: <span class="keyword">return</span> m + n </span><br><span class="line"></span><br><span class="line">        dp = [[<span class="number">0</span>]*n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            dp[<span class="number">0</span>][i] = i  </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m):</span><br><span class="line">            dp[i][<span class="number">0</span>] = i </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">                <span class="keyword">if</span> word1[i-<span class="number">1</span>]==word2[j-<span class="number">1</span>]: </span><br><span class="line">                    dp[i][j] = dp[i-<span class="number">1</span>][j-<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dp[i][j] = <span class="built_in">min</span>(<span class="built_in">min</span>(dp[i-<span class="number">1</span>][j], dp[i][j-<span class="number">1</span>]), dp[i-<span class="number">1</span>][j-<span class="number">1</span>]) + <span class="number">1</span> </span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[-<span class="number">1</span>][-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;给你两个单词 word1 和 word2， 请返回将 word1 转换成 word2 所使用的最少操作数。你可以对一个单词进行如下三种操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;插入一个字符&lt;/li&gt;
&lt;li&gt;删除一个字符&lt;/li&gt;
&lt;li&gt;替</summary>
      
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="动态规划" scheme="http://fly-adser.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="Hot100" scheme="http://fly-adser.top/tags/Hot100/"/>
    
  </entry>
  
  <entry>
    <title>70.爬楼梯</title>
    <link href="http://fly-adser.top/2022/02/19/leetcode70/"/>
    <id>http://fly-adser.top/2022/02/19/leetcode70/</id>
    <published>2022-02-19T13:03:33.000Z</published>
    <updated>2022-02-19T13:10:18.943Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？<a href="https://leetcode-cn.com/problems/climbing-stairs/">题目链接</a> <span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">climbStairs</span>(<span class="params">self, n</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> n&lt;=<span class="number">2</span>: <span class="keyword">return</span> n </span><br><span class="line">        preTwo, preOne = <span class="number">1</span>, <span class="number">2</span> </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, n+<span class="number">1</span>):</span><br><span class="line">            cur = preOne + preTwo  </span><br><span class="line">            preOne, preTwo = cur, preOne  </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> preOne</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;假设你正在爬楼梯。需要 n 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？&lt;a href=&quot;https://leetcode-cn.com/problems/climbing-stairs/&quot;&gt;题目链接&lt;/a&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="动态规划" scheme="http://fly-adser.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="Hot100" scheme="http://fly-adser.top/tags/Hot100/"/>
    
  </entry>
  
  <entry>
    <title>64.最小路径和</title>
    <link href="http://fly-adser.top/2022/02/19/leetcode64/"/>
    <id>http://fly-adser.top/2022/02/19/leetcode64/</id>
    <published>2022-02-19T13:01:00.000Z</published>
    <updated>2022-02-19T13:03:05.374Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>给定一个包含非负整数的 m x n 网格 grid ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。每次只能向下或者向右移动一步。<a href="https://leetcode-cn.com/problems/minimum-path-sum/">题目链接</a> <span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minPathSum</span>(<span class="params">self, grid</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type grid: List[List[int]]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        m, n = <span class="built_in">len</span>(grid), <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">        dp = [[<span class="number">0</span>]*n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">        sumValue = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            sumValue += grid[<span class="number">0</span>][i]</span><br><span class="line">            dp[<span class="number">0</span>][i]  = sumValue  </span><br><span class="line">        </span><br><span class="line">        sumValue = dp[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m):</span><br><span class="line">            sumValue += grid[i][<span class="number">0</span>]</span><br><span class="line">            dp[i][<span class="number">0</span>]  = sumValue  </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">                dp[i][j] = <span class="built_in">min</span>(dp[i-<span class="number">1</span>][j], dp[i][j-<span class="number">1</span>]) + grid[i][j]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[-<span class="number">1</span>][-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;给定一个包含非负整数的 m x n 网格 grid ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。每次只能向下或者向右移动一步。&lt;a href=&quot;https://leetcode-cn.com/problems/minimum-path-sum/&quot;&gt;题目链接&lt;/a&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="动态规划" scheme="http://fly-adser.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="Hot100" scheme="http://fly-adser.top/tags/Hot100/"/>
    
  </entry>
  
  <entry>
    <title>62.不同路径</title>
    <link href="http://fly-adser.top/2022/02/19/leetcode62-1/"/>
    <id>http://fly-adser.top/2022/02/19/leetcode62-1/</id>
    <published>2022-02-19T12:56:37.000Z</published>
    <updated>2022-02-19T13:00:40.165Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。问总共有多少条不同的路径？<a href="https://leetcode-cn.com/problems/unique-paths/">题目链接</a><br /><span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">uniquePaths</span>(<span class="params">self, m, n</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type m: int</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> m==<span class="number">1</span> <span class="keyword">or</span> n==<span class="number">1</span>: <span class="keyword">return</span> <span class="number">1</span> </span><br><span class="line">        dp = [[<span class="number">0</span>]*n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            dp[<span class="number">0</span>][i] = <span class="number">1</span> </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m):</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">1</span> </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">                dp[i][j] = dp[i-<span class="number">1</span>][j] + dp[i][j-<span class="number">1</span>] </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[-<span class="number">1</span>][-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。问总共有多少条不同的路径？&lt;a href=&quot;https://leetcode-cn.com/problems/unique-paths/&quot;&gt;题目链接&lt;/a&gt;&lt;br /&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="动态规划" scheme="http://fly-adser.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="Hot100" scheme="http://fly-adser.top/tags/Hot100/"/>
    
  </entry>
  
  <entry>
    <title>56.合并区间</title>
    <link href="http://fly-adser.top/2022/02/19/leetcode56/"/>
    <id>http://fly-adser.top/2022/02/19/leetcode56/</id>
    <published>2022-02-19T12:53:41.000Z</published>
    <updated>2022-02-19T12:58:35.899Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>以数组 intervals 表示若干个区间的集合，其中单个区间为 intervals[i] = [starti, endi] 。请你合并所有重叠的区间，并返回 一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间 。<a href="https://leetcode-cn.com/problems/merge-intervals/">题目链接</a> <span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span>(<span class="params">self, intervals</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type intervals: List[List[int]]</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(intervals)&lt;=<span class="number">1</span>: <span class="keyword">return</span> intervals </span><br><span class="line">        n = <span class="built_in">len</span>(intervals)</span><br><span class="line"></span><br><span class="line">        intervals = <span class="built_in">sorted</span>(intervals, key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>])</span><br><span class="line">        res    = []</span><br><span class="line">        subRes = intervals[<span class="number">0</span>]</span><br><span class="line">        left   = intervals[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">        right  = intervals[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">            change = <span class="literal">False</span> </span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> intervals[i][<span class="number">0</span>]&gt;=left <span class="keyword">and</span> intervals[i][<span class="number">1</span>]&lt;=right: <span class="keyword">continue</span> </span><br><span class="line">            <span class="keyword">if</span> left&gt;=intervals[i][<span class="number">0</span>] <span class="keyword">and</span> left&lt;=intervals[i][<span class="number">1</span>]:</span><br><span class="line">                subRes[<span class="number">0</span>] = intervals[i][<span class="number">0</span>]</span><br><span class="line">                left      = intervals[i][<span class="number">0</span>]</span><br><span class="line">                change    = <span class="literal">True</span> </span><br><span class="line">            <span class="keyword">if</span> right&gt;=intervals[i][<span class="number">0</span>] <span class="keyword">and</span> right&lt;=intervals[i][<span class="number">1</span>]: </span><br><span class="line">                subRes[<span class="number">1</span>] = intervals[i][<span class="number">1</span>]</span><br><span class="line">                right     = intervals[i][<span class="number">1</span>]</span><br><span class="line">                change    = <span class="literal">True</span> </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> change: <span class="keyword">continue</span> </span><br><span class="line">            </span><br><span class="line">            res.append(subRes)</span><br><span class="line">            subRes = intervals[i]</span><br><span class="line">            left   = intervals[i][<span class="number">0</span>]</span><br><span class="line">            right  = intervals[i][<span class="number">1</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(res)&lt;=<span class="number">0</span> <span class="keyword">or</span> left&gt;res[-<span class="number">1</span>][<span class="number">1</span>]: res.append(subRes)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;以数组 intervals 表示若干个区间的集合，其中单个区间为 intervals[i] = [starti, endi] 。请你合并所有重叠的区间，并返回 一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间 。&lt;a href=&quot;https://leetcode-cn.com/problems/merge-intervals/&quot;&gt;题目链接&lt;/a&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="排序" scheme="http://fly-adser.top/tags/%E6%8E%92%E5%BA%8F/"/>
    
    <category term="Hot100" scheme="http://fly-adser.top/tags/Hot100/"/>
    
  </entry>
  
  <entry>
    <title>55.跳跃游戏</title>
    <link href="http://fly-adser.top/2022/02/19/leetcode55/"/>
    <id>http://fly-adser.top/2022/02/19/leetcode55/</id>
    <published>2022-02-19T12:46:49.000Z</published>
    <updated>2022-02-19T12:52:53.453Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>给定一个非负整数数组 nums ，你最初位于数组的 第一个下标 。数组中的每个元素代表你在该位置可以跳跃的最大长度。判断你是否能够到达最后一个下标。<a href="https://leetcode-cn.com/problems/jump-game/">题目链接</a> <span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canJump</span>(<span class="params">self, nums</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums)&lt;=<span class="number">1</span>: <span class="keyword">return</span> <span class="literal">True</span> </span><br><span class="line">        n      = <span class="built_in">len</span>(nums)</span><br><span class="line">        dp     = [<span class="number">0</span>] * n  </span><br><span class="line">        dp[<span class="number">0</span>]  = nums[<span class="number">0</span>]</span><br><span class="line">        maxPos = dp[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> maxPos&lt;i: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            dp[i]  = i + nums[i] </span><br><span class="line">            maxPos = <span class="built_in">max</span>(maxPos, dp[i])</span><br><span class="line">            <span class="keyword">if</span> maxPos&gt;=(n-<span class="number">1</span>): <span class="keyword">return</span> <span class="literal">True</span> </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> maxPos&gt;=(n-<span class="number">1</span>): <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;给定一个非负整数数组 nums ，你最初位于数组的 第一个下标 。数组中的每个元素代表你在该位置可以跳跃的最大长度。判断你是否能够到达最后一个下标。&lt;a href=&quot;https://leetcode-cn.com/problems/jump-game/&quot;&gt;题目链接&lt;/a&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="动态规划" scheme="http://fly-adser.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="Hot100" scheme="http://fly-adser.top/tags/Hot100/"/>
    
  </entry>
  
  <entry>
    <title>49.字母异位词分组</title>
    <link href="http://fly-adser.top/2022/02/18/leetcode49/"/>
    <id>http://fly-adser.top/2022/02/18/leetcode49/</id>
    <published>2022-02-18T15:17:40.000Z</published>
    <updated>2022-02-18T15:20:18.109Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给你一个字符串数组，请你将 字母异位词 组合在一起。可以按任意顺序返回结果列表。<a href="https://leetcode-cn.com/problems/group-anagrams/">题目链接</a><br><span id="more"></span></p><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">groupAnagrams</span>(<span class="params">self, strs</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type strs: List[str]</span></span><br><span class="line"><span class="string">        :rtype: List[List[str]]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        mp = collections.defaultdict(<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> st <span class="keyword">in</span> strs:</span><br><span class="line">            key = <span class="string">&quot;&quot;</span>.join(<span class="built_in">sorted</span>(st))</span><br><span class="line">            mp[key].append(st) </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>(mp.values())</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;给你一个字符串数组，请你将 字母异位词 组合在一起。可以按任意顺序返回结果列表。&lt;a href=&quot;https://leetcode-cn.com/problems/group-anagrams/&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="字符串" scheme="http://fly-adser.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="Hot100" scheme="http://fly-adser.top/tags/Hot100/"/>
    
  </entry>
  
  <entry>
    <title>48.旋转图像</title>
    <link href="http://fly-adser.top/2022/02/18/leetcode48-1/"/>
    <id>http://fly-adser.top/2022/02/18/leetcode48-1/</id>
    <published>2022-02-18T15:14:45.000Z</published>
    <updated>2022-02-18T15:17:15.658Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个 n × n 的二维矩阵 matrix 表示一个图像。请你将图像顺时针旋转 90 度。<a href="https://leetcode-cn.com/problems/rotate-image/">题目链接</a><br><span id="more"></span></p><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rotate</span>(<span class="params">self, matrix</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type matrix: List[List[int]]</span></span><br><span class="line"><span class="string">        :rtype: None Do not return anything, modify matrix in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        n = <span class="built_in">len</span>(matrix)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n//<span class="number">2</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n):</span><br><span class="line">                matrix[i][j], matrix[n-i-<span class="number">1</span>][j] = matrix[n-i-<span class="number">1</span>][j], matrix[i][j]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, i):</span><br><span class="line">                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;给定一个 n × n 的二维矩阵 matrix 表示一个图像。请你将图像顺时针旋转 90 度。&lt;a href=&quot;https://leetcode-cn.com/problems/rotate-image/&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="数学" scheme="http://fly-adser.top/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="Hot100" scheme="http://fly-adser.top/tags/Hot100/"/>
    
  </entry>
  
  <entry>
    <title>46.全排列</title>
    <link href="http://fly-adser.top/2022/02/17/leetcode46-1/"/>
    <id>http://fly-adser.top/2022/02/17/leetcode46-1/</id>
    <published>2022-02-17T15:06:04.000Z</published>
    <updated>2022-02-17T15:11:38.182Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>给定一个不含重复数字的数组 nums ，返回其 所有可能的全排列 。你可以 按任意顺序 返回答案。<a href="https://leetcode-cn.com/problems/permutations/">题目链接</a> <span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">permute</span>(<span class="params">self, nums</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.res = []</span><br><span class="line">        self.recur(nums, [], <span class="number">0</span>, <span class="built_in">len</span>(nums))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.res </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recur</span>(<span class="params">self, nums, path, k, n</span>):</span></span><br><span class="line">        <span class="keyword">if</span> k==n: </span><br><span class="line">            self.res.append(<span class="built_in">list</span>(path))</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n):</span><br><span class="line">            <span class="keyword">if</span> nums[i] <span class="keyword">in</span> path: <span class="keyword">continue</span> </span><br><span class="line">            path.append(nums[i])</span><br><span class="line">            self.recur(nums, path, k+<span class="number">1</span>, n)</span><br><span class="line">            path.pop()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;给定一个不含重复数字的数组 nums ，返回其 所有可能的全排列 。你可以 按任意顺序 返回答案。&lt;a href=&quot;https://leetcode-cn.com/problems/permutations/&quot;&gt;题目链接&lt;/a&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="搜索与回溯算法" scheme="http://fly-adser.top/tags/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
    
    <category term="Hot100" scheme="http://fly-adser.top/tags/Hot100/"/>
    
  </entry>
  
  <entry>
    <title>42.接雨水</title>
    <link href="http://fly-adser.top/2022/02/17/leetcode42/"/>
    <id>http://fly-adser.top/2022/02/17/leetcode42/</id>
    <published>2022-02-17T15:03:41.000Z</published>
    <updated>2022-02-17T15:08:05.539Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。<a href="https://leetcode-cn.com/problems/trapping-rain-water/">题目链接</a></p><span id="more"></span><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">trap</span>(<span class="params">self, height</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type height: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(height)&lt;=<span class="number">2</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        hLen = <span class="built_in">len</span>(height) </span><br><span class="line">        maxLeft, maxRight = [<span class="number">0</span>]*hLen, [<span class="number">0</span>]*hLen </span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, hLen):</span><br><span class="line">            maxLeft[i] = <span class="built_in">max</span>(maxLeft[i-<span class="number">1</span>], height[i-<span class="number">1</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(hLen-<span class="number">2</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            maxRight[i] = <span class="built_in">max</span>(maxRight[i+<span class="number">1</span>], height[i+<span class="number">1</span>]) </span><br><span class="line">        </span><br><span class="line">        sumWater = <span class="number">0</span> </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, hLen-<span class="number">1</span>):</span><br><span class="line">            hgt = <span class="built_in">min</span>(maxLeft[i], maxRight[i])</span><br><span class="line">            sumWater += <span class="built_in">max</span>(<span class="number">0</span>, hgt-height[i])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> sumWater</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。&lt;a href=&quot;https://leetcode-cn.com/problems/trapping-rain-water/&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="动态规划" scheme="http://fly-adser.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="Hot100" scheme="http://fly-adser.top/tags/Hot100/"/>
    
  </entry>
  
  <entry>
    <title>39.组合总和</title>
    <link href="http://fly-adser.top/2022/02/17/leetcode39/"/>
    <id>http://fly-adser.top/2022/02/17/leetcode39/</id>
    <published>2022-02-17T15:00:44.000Z</published>
    <updated>2022-02-17T15:08:26.466Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>给你一个 无重复元素 的整数数组 candidates 和一个目标整数 target ，找出 candidates 中可以使数字和为目标数 target 的 所有 不同组合 ，并以列表形式返回。你可以按 任意顺序 返回这些组合。<a href="https://leetcode-cn.com/problems/combination-sum/">题目链接</a> <span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combinationSum</span>(<span class="params">self, candidates, target</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type candidates: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.res = []</span><br><span class="line">        path     = []</span><br><span class="line">        self.recur(candidates, path, target, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.res</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recur</span>(<span class="params">self, candidates, path, target, tmpSum, index</span>):</span></span><br><span class="line">        <span class="keyword">if</span> tmpSum==target:</span><br><span class="line">            self.res.append(<span class="built_in">list</span>(path))</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> tmpSum&gt;target: <span class="keyword">return</span> </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(index, <span class="built_in">len</span>(candidates)):</span><br><span class="line">            tmpSum += candidates[i]</span><br><span class="line">            path.append(candidates[i])</span><br><span class="line">            self.recur(candidates, path, target, tmpSum, i)</span><br><span class="line">            path.pop() </span><br><span class="line">            tmpSum -= candidates[i]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;给你一个 无重复元素 的整数数组 candidates 和一个目标整数 target ，找出 candidates 中可以使数字和为目标数 target 的 所有 不同组合 ，并以列表形式返回。你可以按 任意顺序 返回这些组合。&lt;a href=&quot;https://leetcode-cn.com/problems/combination-sum/&quot;&gt;题目链接&lt;/a&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="搜索与回溯算法" scheme="http://fly-adser.top/tags/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
    
    <category term="Hot100" scheme="http://fly-adser.top/tags/Hot100/"/>
    
  </entry>
  
  <entry>
    <title>34.在排序数组中查找元素的第一个和最后一个位置</title>
    <link href="http://fly-adser.top/2022/02/14/leetcode34/"/>
    <id>http://fly-adser.top/2022/02/14/leetcode34/</id>
    <published>2022-02-14T15:04:05.000Z</published>
    <updated>2022-02-14T15:06:01.999Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。<a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/">题目链接</a><br><span id="more"></span></p><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searchRange</span>(<span class="params">self, nums, target</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums)&lt;=<span class="number">0</span>: <span class="keyword">return</span> [-<span class="number">1</span>, -<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums)&lt;=<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> nums[<span class="number">0</span>]==target: </span><br><span class="line">                <span class="keyword">return</span> [<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> [-<span class="number">1</span>, -<span class="number">1</span>]</span><br><span class="line">        </span><br><span class="line">        left, index, right = <span class="number">0</span>, -<span class="number">1</span>, <span class="built_in">len</span>(nums)-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left&lt;=right:</span><br><span class="line">            mid = left + (right - left) // <span class="number">2</span> </span><br><span class="line">            <span class="keyword">if</span> nums[mid]==target:</span><br><span class="line">                index = mid</span><br><span class="line">                <span class="keyword">break</span> </span><br><span class="line">            <span class="keyword">elif</span> nums[mid]&lt;target:</span><br><span class="line">                left  = mid + <span class="number">1</span> </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right = mid - <span class="number">1</span> </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> index&lt;<span class="number">0</span>: <span class="keyword">return</span> [-<span class="number">1</span>, -<span class="number">1</span>]</span><br><span class="line">        left, right = <span class="number">0</span>, index </span><br><span class="line">        <span class="keyword">while</span> left&lt;=right:</span><br><span class="line">            mid = left + (right - left) // <span class="number">2</span> </span><br><span class="line">            <span class="keyword">if</span> nums[mid]==target <span class="keyword">and</span> (mid==<span class="number">0</span> <span class="keyword">or</span> nums[mid-<span class="number">1</span>]&lt;target):</span><br><span class="line">                resLeft = mid </span><br><span class="line">                <span class="keyword">break</span> </span><br><span class="line">            <span class="keyword">elif</span> nums[mid]&gt;=target:</span><br><span class="line">                right = mid - <span class="number">1</span> </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                left  = mid + <span class="number">1</span> </span><br><span class="line">        </span><br><span class="line">        left, right = index, <span class="built_in">len</span>(nums)-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left&lt;=right:</span><br><span class="line">            mid = left + (right - left) // <span class="number">2</span> </span><br><span class="line">            <span class="keyword">if</span> nums[mid]==target <span class="keyword">and</span> (mid==<span class="built_in">len</span>(nums)-<span class="number">1</span> <span class="keyword">or</span> nums[mid+<span class="number">1</span>]&gt;nums[mid]):</span><br><span class="line">                resRight = mid </span><br><span class="line">                <span class="keyword">break</span> </span><br><span class="line">            <span class="keyword">elif</span> nums[mid]&lt;=target:</span><br><span class="line">                left  = mid + <span class="number">1</span> </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right = mid - <span class="number">1</span> </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> [resLeft, resRight]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。&lt;a href=&quot;https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/&quot;&gt;题目链接&lt;/a&gt;&lt;br&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="查找算法" scheme="http://fly-adser.top/tags/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/"/>
    
    <category term="Hot100" scheme="http://fly-adser.top/tags/Hot100/"/>
    
  </entry>
  
  <entry>
    <title>33.搜索旋转排序数组</title>
    <link href="http://fly-adser.top/2022/02/14/leetcode33-1/"/>
    <id>http://fly-adser.top/2022/02/14/leetcode33-1/</id>
    <published>2022-02-14T15:01:06.000Z</published>
    <updated>2022-02-14T15:03:51.618Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>整数数组 nums 按升序排列，数组中的值 互不相同 。</p><p>在传递给函数之前，nums 在预先未知的某个下标 k（0 &lt;= k &lt; nums.length）上进行了 旋转，使数组变为 [nums[k], nums[k+1], …, nums[n-1], nums[0], nums[1], …, nums[k-1]]（下标 从 0 开始 计数）。例如， [0,1,2,4,5,6,7] 在下标 3 处经旋转后可能变为 [4,5,6,7,0,1,2] 。<br><span id="more"></span><br>给你 旋转后 的数组 nums 和一个整数 target ，如果 nums 中存在这个目标值 target ，则返回它的下标，否则返回 -1 。<a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array/">题目链接</a></p><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">self, nums, target</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums)==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> nums[<span class="number">0</span>]==target: </span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span> </span><br><span class="line">        </span><br><span class="line">        left, right = <span class="number">0</span>, <span class="built_in">len</span>(nums)-<span class="number">1</span> </span><br><span class="line">        <span class="keyword">while</span> left&lt;=right:</span><br><span class="line">            mid = left + (right - left) // <span class="number">2</span> </span><br><span class="line">            <span class="keyword">if</span> nums[mid]==target: </span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            <span class="keyword">if</span> left==right:</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span> </span><br><span class="line">            <span class="keyword">if</span> nums[left]==target: <span class="keyword">return</span> left </span><br><span class="line">            <span class="keyword">if</span> nums[right]==target: <span class="keyword">return</span> right</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> nums[left]&lt;=nums[mid-<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">if</span> target&gt;=nums[left] <span class="keyword">and</span> target&lt;=nums[mid-<span class="number">1</span>]:</span><br><span class="line">                    right = mid - <span class="number">1</span> </span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    left  = mid + <span class="number">1</span> </span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> nums[mid+<span class="number">1</span>]&lt;=nums[right]:</span><br><span class="line">                <span class="keyword">if</span> target&gt;=nums[mid+<span class="number">1</span>] <span class="keyword">and</span> target&lt;=nums[right]:</span><br><span class="line">                    left  = mid + <span class="number">1</span> </span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    right = mid - <span class="number">1</span> </span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;整数数组 nums 按升序排列，数组中的值 互不相同 。&lt;/p&gt;
&lt;p&gt;在传递给函数之前，nums 在预先未知的某个下标 k（0 &amp;lt;= k &amp;lt; nums.length）上进行了 旋转，使数组变为 [nums[k], nums[k+1], …, nums[n-1], nums[0], nums[1], …, nums[k-1]]（下标 从 0 开始 计数）。例如， [0,1,2,4,5,6,7] 在下标 3 处经旋转后可能变为 [4,5,6,7,0,1,2] 。&lt;br&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="查找算法" scheme="http://fly-adser.top/tags/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/"/>
    
    <category term="Hot100" scheme="http://fly-adser.top/tags/Hot100/"/>
    
  </entry>
  
  <entry>
    <title>32.最长有效括号</title>
    <link href="http://fly-adser.top/2022/02/13/leetcode32/"/>
    <id>http://fly-adser.top/2022/02/13/leetcode32/</id>
    <published>2022-02-13T12:45:02.000Z</published>
    <updated>2022-02-13T12:46:59.829Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>给你一个只包含 '(' 和 ')' 的字符串，找出最长有效（格式正确且连续）括号子串的长度。<a href="https://leetcode-cn.com/problems/longest-valid-parentheses/">题目链接</a><br /><span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestValidParentheses</span>(<span class="params">self, s</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        stack = [-<span class="number">1</span>]</span><br><span class="line">        left, res = <span class="number">0</span>, <span class="number">0</span>  </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(s)):</span><br><span class="line">            <span class="keyword">if</span> s[i]==<span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">                stack.append(i)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                index = stack[-<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> index&lt;<span class="number">0</span>: </span><br><span class="line">                    stack.append(i)</span><br><span class="line">                    <span class="keyword">continue</span> </span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> s[index]==<span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">                    stack.pop()</span><br><span class="line">                    res = <span class="built_in">max</span>(i-stack[-<span class="number">1</span>], res)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    stack.append(i)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;给你一个只包含 &#39;(&#39; 和 &#39;)&#39; 的字符串，找出最长有效（格式正确且连续）括号子串的长度。&lt;a href=&quot;https://leetcode-cn.com/problems/longest-valid-parentheses/&quot;&gt;题目链接&lt;/a&gt;&lt;br /&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="字符串" scheme="http://fly-adser.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="Hot100" scheme="http://fly-adser.top/tags/Hot100/"/>
    
  </entry>
  
  <entry>
    <title>31.下一个排列</title>
    <link href="http://fly-adser.top/2022/02/13/leetcode31/"/>
    <id>http://fly-adser.top/2022/02/13/leetcode31/</id>
    <published>2022-02-13T12:42:13.000Z</published>
    <updated>2022-02-13T12:44:40.298Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>整数数组的一个 排列 就是将其所有成员以序列或线性顺序排列。<a href="https://leetcode-cn.com/problems/next-permutation/">题目链接</a> <span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nextPermutation</span>(<span class="params">self, nums</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: None Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums)&lt;=<span class="number">1</span>: <span class="keyword">return</span> nums </span><br><span class="line"></span><br><span class="line">        left, right = <span class="number">0</span>, <span class="built_in">len</span>(nums)-<span class="number">1</span> </span><br><span class="line">        <span class="keyword">while</span> right&gt;left:</span><br><span class="line">            <span class="keyword">if</span> nums[right]&gt;nums[right-<span class="number">1</span>]: <span class="keyword">break</span> </span><br><span class="line">            right -= <span class="number">1</span> </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> right==left:</span><br><span class="line">            nums.sort()</span><br><span class="line">            <span class="keyword">return</span> nums </span><br><span class="line">        </span><br><span class="line">        left  = right - <span class="number">1</span> </span><br><span class="line">        right = <span class="built_in">len</span>(nums)-<span class="number">1</span> </span><br><span class="line">        <span class="keyword">while</span> right&gt;left:</span><br><span class="line">            <span class="keyword">if</span> nums[right]&gt;nums[left]: <span class="keyword">break</span> </span><br><span class="line">            right -= <span class="number">1</span> </span><br><span class="line">        </span><br><span class="line">        nums[left], nums[right] = nums[right], nums[left]</span><br><span class="line">        self.reverse(nums, left+<span class="number">1</span>, <span class="built_in">len</span>(nums)-<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span>(<span class="params">self, nums, left, right</span>):</span></span><br><span class="line">        <span class="keyword">while</span> left&lt;right:</span><br><span class="line">            nums[left], nums[right] = nums[right], nums[left]</span><br><span class="line">            left  += <span class="number">1</span></span><br><span class="line">            right -= <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;整数数组的一个 排列 就是将其所有成员以序列或线性顺序排列。&lt;a href=&quot;https://leetcode-cn.com/problems/next-permutation/&quot;&gt;题目链接&lt;/a&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="双指针" scheme="http://fly-adser.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
    <category term="Hot100" scheme="http://fly-adser.top/tags/Hot100/"/>
    
  </entry>
  
  <entry>
    <title>23.合并K个升序链表</title>
    <link href="http://fly-adser.top/2022/02/12/leetcode23/"/>
    <id>http://fly-adser.top/2022/02/12/leetcode23/</id>
    <published>2022-02-12T03:11:13.000Z</published>
    <updated>2022-02-12T03:15:37.710Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>给你一个链表数组，每个链表都已经按升序排列。<a href="https://leetcode-cn.com/problems/merge-k-sorted-lists/">题目链接</a></p><span id="more"></span><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeKLists</span>(<span class="params">self, lists</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type lists: List[ListNode]</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(lists)&lt;=<span class="number">0</span>: <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.mergeSort(lists, <span class="number">0</span>, <span class="built_in">len</span>(lists)-<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeSort</span>(<span class="params">self, lists, left, right</span>):</span></span><br><span class="line">        <span class="keyword">if</span> left&gt;=right: <span class="keyword">return</span> lists[left] </span><br><span class="line"></span><br><span class="line">        mid   = left + (right - left) // <span class="number">2</span> </span><br><span class="line">        listA = self.mergeSort(lists, left, mid)</span><br><span class="line">        listB = self.mergeSort(lists, mid+<span class="number">1</span>, right)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.mergeTwoList(listA, listB)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoList</span>(<span class="params">self, list1, list2</span>):</span></span><br><span class="line">        <span class="keyword">if</span> list1 <span class="keyword">is</span> <span class="literal">None</span>: <span class="keyword">return</span> list2 </span><br><span class="line">        <span class="keyword">if</span> list2 <span class="keyword">is</span> <span class="literal">None</span>: <span class="keyword">return</span> list1</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> list1.val&lt;=list2.val:</span><br><span class="line">            head  = list1 </span><br><span class="line">            list1 = list1.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            head  = list2</span><br><span class="line">            list2 = list2.<span class="built_in">next</span> </span><br><span class="line">        node = head</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> list1 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> list2 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> list1.val&lt;=list2.val:</span><br><span class="line">                node.<span class="built_in">next</span> = list1 </span><br><span class="line">                node      = node.<span class="built_in">next</span> </span><br><span class="line">                list1     = list1.<span class="built_in">next</span> </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                node.<span class="built_in">next</span> = list2 </span><br><span class="line">                node      = node.<span class="built_in">next</span> </span><br><span class="line">                list2     = list2.<span class="built_in">next</span>  </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> list1 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            node.<span class="built_in">next</span> = list1 </span><br><span class="line">        <span class="keyword">if</span> list2 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            node.<span class="built_in">next</span> = list2 </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;给你一个链表数组，每个链表都已经按升序排列。&lt;a href=&quot;https://leetcode-cn.com/problems/merge-k-sorted-lists/&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="分治算法" scheme="http://fly-adser.top/tags/%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95/"/>
    
    <category term="Hot100" scheme="http://fly-adser.top/tags/Hot100/"/>
    
  </entry>
  
  <entry>
    <title>22.括号生成</title>
    <link href="http://fly-adser.top/2022/02/12/leetcode22-1/"/>
    <id>http://fly-adser.top/2022/02/12/leetcode22-1/</id>
    <published>2022-02-12T03:07:20.000Z</published>
    <updated>2022-02-12T03:10:39.618Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。<a href="https://leetcode-cn.com/problems/generate-parentheses/">题目链接</a><br /><span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generateParenthesis</span>(<span class="params">self, n</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: List[str]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span> </span><br><span class="line">        self.res = []</span><br><span class="line">        self.recur([], <span class="number">0</span>, n)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.res</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recur</span>(<span class="params">self, subRes, k, n</span>):</span></span><br><span class="line">        <span class="keyword">if</span> k==<span class="number">2</span>*n:</span><br><span class="line">            stack = []</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> subRes:</span><br><span class="line">                <span class="keyword">if</span> c==<span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">                    stack.append(c)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">len</span>(stack)&lt;=<span class="number">0</span> <span class="keyword">or</span> stack[-<span class="number">1</span>]!=<span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">                        <span class="keyword">return</span> </span><br><span class="line">                    stack.pop() </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(stack)&lt;=<span class="number">0</span>:</span><br><span class="line">                self.res.append(<span class="string">&#x27;&#x27;</span>.join(subRes))</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span>   </span><br><span class="line">        </span><br><span class="line">        s = <span class="string">&#x27;()&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">            subRes.append(c)</span><br><span class="line">            self.recur(subRes, k+<span class="number">1</span>, n)</span><br><span class="line">            subRes.pop()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。&lt;a href=&quot;https://leetcode-cn.com/problems/generate-parentheses/&quot;&gt;题目链接&lt;/a&gt;&lt;br /&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="搜索与回溯算法" scheme="http://fly-adser.top/tags/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
    
    <category term="Hot100" scheme="http://fly-adser.top/tags/Hot100/"/>
    
  </entry>
  
  <entry>
    <title>21.合并两个有序链表</title>
    <link href="http://fly-adser.top/2022/02/11/leetcode21-2/"/>
    <id>http://fly-adser.top/2022/02/11/leetcode21-2/</id>
    <published>2022-02-10T23:47:55.000Z</published>
    <updated>2022-02-10T23:50:01.046Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><p>将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 <a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/">题目链接</a> <span id="more"></span></p><h1 id="解法">解法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span>(<span class="params">self, list1, list2</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type list1: Optional[ListNode]</span></span><br><span class="line"><span class="string">        :type list2: Optional[ListNode]</span></span><br><span class="line"><span class="string">        :rtype: Optional[ListNode]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> list1 <span class="keyword">is</span> <span class="literal">None</span>: <span class="keyword">return</span> list2 </span><br><span class="line">        <span class="keyword">if</span> list2 <span class="keyword">is</span> <span class="literal">None</span>: <span class="keyword">return</span> list1</span><br><span class="line">        <span class="keyword">if</span> list1.val&lt;=list2.val:</span><br><span class="line">            head  = list1</span><br><span class="line">            list1 = list1.<span class="built_in">next</span>  </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            head  = list2</span><br><span class="line">            list2 = list2.<span class="built_in">next</span> </span><br><span class="line">        </span><br><span class="line">        node = head </span><br><span class="line">        <span class="keyword">while</span> list1 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> list2 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> list1.val&lt;=list2.val:</span><br><span class="line">                node.<span class="built_in">next</span> = list1</span><br><span class="line">                list1     = list1.<span class="built_in">next</span></span><br><span class="line">                node      = node.<span class="built_in">next</span> </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                node.<span class="built_in">next</span> = list2</span><br><span class="line">                list2     = list2.<span class="built_in">next</span></span><br><span class="line">                node      = node.<span class="built_in">next</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> list1 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            node.<span class="built_in">next</span> = list1 </span><br><span class="line">        <span class="keyword">if</span> list2 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            node.<span class="built_in">next</span> = list2 </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;p&gt;将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 &lt;a href=&quot;https://leetcode-cn.com/problems/merge-two-sorted-lists/&quot;&gt;题目链接&lt;/a&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://fly-adser.top/tags/LeetCode/"/>
    
    <category term="链表" scheme="http://fly-adser.top/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="Hot100" scheme="http://fly-adser.top/tags/Hot100/"/>
    
  </entry>
  
</feed>
